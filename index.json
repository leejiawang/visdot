[{"categories":null,"contents":"如何给自己的网页添加类似于 Youtube 一样的顶部加载进度条，通过pace.js添加是一个比较简便且实现效果不错的方法，下面就看看要如何操作吧。\n第1步 引入 pace.js 可进入pace.js的官网下载文件到本地，或者直接通过 CDN 引入网页，国内可使用字节跳动CDN镜像链接。\n示例\n\u0026lt;head\u0026gt; \u0026lt;script data-pace-options=\u0026#39;{ \u0026#34;ajax\u0026#34;: false }\u0026#39; src=\u0026#39;pace.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; 官方CDN镜像\nhttps://raw.githubusercontent.com/CodeByZach/pace/master/pace.min.js 字节跳动CDN镜像\nhttps://s2.pstatp.com/cdn/expire-1-M/pace/1.0.2/pace.min.js 创建独立的JavaScript文件并引入页面，内容如下。\ndefine([\u0026#39;pace\u0026#39;], function(pace){ pace.start({ document: false }); }); 第2步 添加样式 可直接在页面head中添加默认样式，也可创建独立的.css文件引入页面。\n\u0026lt;style\u0026gt; .pace { -webkit-pointer-events: none; pointer-events: none; -webkit-user-select: none; -moz-user-select: none; user-select: none; } .pace-inactive { display: none; } .pace .pace-progress { background: #29d; position: fixed; z-index: 2000; top: 0; right: 100%; width: 100%; height: 2px; } \u0026lt;/style\u0026gt; 通过修改样式表中 .pace .pace-progress的background和height属性可改进度条的颜色和宽度，已适应自己的页面风格。也可为其添加box-shadow属性来实现阴影。下面是我自定义的风格供大家参考。\n.pace .pace-progress { background: #2299dd; position: fixed; z-index: 2000; top: 0; right: 100%; width: 100%; height: 3px; box-shadow: 0 0 3px #2299dd; } 不仅是类似 Youtube 的顶部横条的样式，官方还提供了很多其他的样式，更多详情可阅读官方文档。\n","date":"2020-10-19T00:00:00Z","permalink":"https://visdot.com/warehouse/loading_bar/","section":"warehouse","tags":null,"title":"通过 pace.js 添加网页顶部加载进度条"},{"categories":null,"contents":" 对于刚接触 macOS 的用户来说，突如其来的各种弹窗警告会让他们措手不及，下面我就来介绍一下一些弹窗的解决措施。\n “XXX” is damaged and can’t be opened. You should move it to the Trash\n如果在安装软件过程中弹出上述提示，可依次打开「System Preferences」-「Security \u0026amp; Privacy」并勾选下方的 「AnyWhere」即可，如果没有「AnyWhere」选项，执行下述操作。\n打开终端并输入下列代码：\nsudo spctl --master-disable 此时「AnyWhere」会出现，选择即可。如果方法一执行完后，任然出现提示，则执行下述方法。\n将需要打开的程序放入 Applications 文件夹中，打开终端并输入下列代码（其中 XXX 为程序名称）即可。\nxattr -cr /Applications/XXX.app ","date":"2020-01-14T00:00:00Z","permalink":"https://visdot.com/warehouse/macos_tips/","section":"warehouse","tags":null,"title":"macOS 常见问题解决办法"},{"categories":null,"contents":"修改滚动条宽度 使用快捷键 Windows + R 打开 「运行」，输入  regedit 打开注册表编辑器。\n依次进入如下路径：\nHKEY_CURRENT_USER\\Control Panel\\Desktop\\WindowMetrices 在「WindowMetrices」选项中修改「ScrollHeight」（滚动条高度）和 「ScrollWidth」（滚动条宽度）的取值即可。系统默认值为 -255，推荐修改值为 -120。\n开启卓越性能模式 使用快捷键 Windows + R 打开 「运行」，输入 cmd 打开终端，输入如下命令并回车。\npowercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 运行后电源选项中会多出来一个「卓越性能」可选，选择并确定。\n打开上帝模式 在桌面新建文件夹并将文件夹名称修改为：\nGodMode.{ED7BA470-8E54-465E-825C-99712043E01C} 命名之后打开文件夹即可看到各种设置选项的快速入口。\n关闭 Windows 系统自动更新 快捷键 Windows+R 打开「运行」，输入组策略命令 services.msc，点击确定。\n在服务中找到「Windows Update」选项，双击。\n在「启动类型」下选择「禁用」，并点击确定。\n关闭 Windows Defender 使用快捷键 Windows+R 打开「运行」，输入组策略命令 gpedit.msc，点击确定。进入组策略后依次进入如下路径：\n 计算机配置/管理模板/Windows组件/Windows Defender防病毒程序/关闭Windows Defender防病毒程序 双击关闭「Windows Defender」防病毒程序，在弹出的窗口中选择已启用，点击确定，退出组策略编辑器。\n在任务栏空白处点击鼠标右键，打开任务管理器，点击启动选项卡，右键单击「Windows Defender」将其禁用，完成上述操作后重启计算机。\n隐藏资源管理器中的快速启动 使用快捷键 Windows+R 打开「运行」，输入组策略命令 REGEDIT，点击确定打开「注册表编辑器」，在弹出的对话框中点击「是」，依次点击或在地址栏中输入如下路径：\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\ 为保险起见，可以点击窗口左上角「文件」-「导出」，进行备份注册表。备份完成之后将灰框中的六项右键删除掉，这六项就是对应的这台电脑中的六个文件夹，删除完后重启资源管理器。就可以获得没有快速启动文件夹的资源管理器了。\n","date":"2019-12-14T00:00:00Z","permalink":"https://visdot.com/warehouse/windows_tips/","section":"warehouse","tags":null,"title":"Windows 系统使用技巧"},{"categories":null,"contents":"在用 Windows 系统的过程中操作不当经常会被“蓝屏伺候”，有时候系统自己修复不好，最简单粗暴的就是重装系统，只要不是硬件损坏几乎都能解决。本文带你掌握安装系统这项技能。\n 第1步 备份已有系统序列号 大部分品牌台式机以及笔记本都是出厂预装了正版系统的，个人消费产品一般预装的是 Windows10 家庭版，这样如果你想继续使用该序列号的话重装的系统也应为 Windows10 家庭版，只有版本对应序列号才能正常激活系统。\n如果你的设备已经装有激活的正版系统，可按照如下方式备份激活信息。\n微软账户关联 最简单直接的备份方式就是注册并在设备上登陆「Microsoft 账户」，这样你的数字许可证就会与自己的账户关联起来。这样当你在该设备上重装系统后，登陆自己的微软账户，系统就会使用与微软账户关联的数字许可证自动激活。\n使用第三方工具备份 可使用 AIDA64 查看并保存序列号，右侧菜单栏点击操作系统，中间内容区「产品密钥」后即是系统序列号。将其记录下来，待系统安装时输入以激活系统。\n第2步 获取系统安装镜像  系统安装存在风险，请事先备份好设备上的文件数据。对于动手能力不太好的小白，在设备没出现问题时，如非必要，谨慎选择重装系统。\n 大部分品牌台式机以及笔记本重装系统可从对应品牌官网的产品支持页面获取安装镜像。自配的组装机推荐安装原版系统，新买来的品牌电脑也推荐重装一次原版系统，这样使用过程中问题更少也更清洁。\n系统获取相关站点: Windows10 家庭版官方购买地址 第三方镜像下载地址（仅安装） Windows10 镜像本地下载（仅安装）。通过第三方网站获取 Windows10 可参考下图。\n第三方获取镜像网站 msdn.itellyou.cn 第3步 制作 WinPE 系统启动盘 全网有很多 WinPE 系统制作工具，但有些工具存在强制锁主页以及预装软件的情况。\n个人推荐使用 微PE工具箱，功能全且纯净。下载并安装工具，准备一个储存盘（一般使用U盘），备份U盘内文件数据并格式化。根据工具引导制作 WinPE 系统启动盘。\n   软件版本 下载链接 产品页面     V2.0 Win32 Win64 官网 下载    上表链接均来自微PE工具箱产品官网 www.wepe.com.cn 第4步 进入 WinPE 系统 将之前下载的原版安装镜像拷贝进制作好的 WinPE 系统启动盘，并插入待安装的设备，重启进入BIOS,选择「系统安装U盘」为启动「首选项」，按F10保存设置并重启设备。\n进入BIOS台式机可使用按键 Del，笔记本一般使用  F2 F12 F11 Esc。进入 WinPE 系统后，使用内置的 Windows 系统安装器安装原版系统镜像。\n第5步 安装系统 进入 WinPE 后，使用桌面上的 DiskGenius 工具对硬盘进行格式化，如需硬盘分区也在此时进行分区操作。硬盘推荐使用 GUID 分区图，并选择生成 EFI 分区。\n然后使用桌面上的 WinNTSetup 工具进行系统安装的准备工作。\n根据提示依次选择：\n  安装文件：之前下载的系统安装镜像，以 iso 为后缀名。\n  引导驱动器：刚刚生成的 EFI 分区，约为 100~400 MB 大小。\n  安装驱动器：系统将要安装的分区，将来的系统 C 盘。\n  系统版本：一般根据个人需求选择「家庭版」或者「专业版」。\n  选择好后点击安装，待进度条完整后系统会自动重启并进行系统安装，安装过程中设备将重启多次。\n最后根据提示完成简单地引导步骤即可进入系统。\n","date":"2019-12-14T00:00:00Z","permalink":"https://visdot.com/warehouse/windows_install/","section":"warehouse","tags":null,"title":"Windows 系统安装教程"},{"categories":null,"contents":"Vuepress 是一款 Vue 驱动的静态网站生成器，具有简洁至上、高性能、一键部署等特点，可方便快捷的建立自己的网站。\n  相关站点 Vuepress 官网 Vuepress 仓库 Vuepress 模板\n 第1步 安装 Vuepress 框架 首先新建并进入博客文件夹test在终端中输入如下代码，命令中test是所创建的网站文件夹名称，由用户自定义，以下网站名均由test代指。\nmkdir test cd test yarn 安装 可使用 yarn 或者 npm 进行安装，但推荐使用 yarn 安装 ，因为 yarn 更稳定，出错几率更少，在终端内输入如下命令全局安装 Vuepress。\nyarn global add vuepress npm 安装 在终端内输入如下命令全局安装 Vuepress。\nnpm install -g vuepress 由于国内可能会有网络受限的问题，使用npm会出现安装极慢或者安装失败，可以用cnpm替代。使用如下命令安装。\nnpm install -g cnpm --registry=https://registry.npm.taobao.org 然后使用cnpm替换命令中的npm，例如使用下列代码全局安装 vuepress。\ncnpm install -g hexo-cli  执行安装操作前 macOS 用户终端输入sudo su命令并密码获取系统权限，Windows 用户以管理员身份运行CMD获取系统权限。\n 第2步 建立基本目录结构 克隆仓库 新手可以通过克隆框架仓库来快速建立目录结构，这样不容易出问题，下面是一个仅包含 Vuepress 基本结构的 GitHub 仓库。\nhttps://github.com/leejiawang/vuepress-template.git 全新自建 你也可以自己创建全新的站点，参考官方给的目录结构创建相关文件夹和文件，下面是 Vuepress 文档 推荐的目录结构。\ntest ├── docs │ ├── .vuepress (可选的) │ │ ├── components (可选的) │ │ ├── theme (可选的) │ │ │ └── Layout.vue │ │ ├── public (可选的) │ │ ├── styles (可选的) │ │ │ ├── index.styl │ │ │ └── palette.styl │ │ ├── templates (可选的, 谨慎配置) │ │ │ ├── dev.html │ │ │ └── ssr.html │ │ ├── config.js (可选的) │ │ └── enhanceApp.js (可选的) │ │ │ ├── README.md │ ├── guide │ │ └── README.md │ └── config.md │ └── package.json 第3步 网站配置 网站配置文件 .vuepress/config.js，配置最基本的标题与页面描述。\nmodule.exports = { title: 'XXX', description: 'XXXX' } 第4步 添加页面 在 docs 文件夹内添加新页面，页面内容采用 Markdown 格式。\n第5步 运行网站 在终端中输入如下命令生成网页。浏览器访问 localhost:3000 预览效果，关闭预览使用组合键 Ctrl+C 退出当前命令。\nyarn run docs:dev 第6步 生成静态网页 在终端中输入如下命令生成静态网页。\nyarn run docs:build 第7步 部署 Github Pages 执行此操作前请确保拥有Github账号，并创建一个以 XXX.github.io命名的空仓库，其中 XXX 为你的 Github 用户名，修改 docs/.vuepress/config.js 文件中 base配置信息。\nbase: '/', 如果你创建了其他名字的仓库，则 base 按如下格式填写，代码中XXX 为你的 Github 用户名，XXXX为仓库名。\nbase: https://XXX.github.io/XXXX/, 在 Vuepress 根目录创建 deploy.sh 文件，其内容如下，高亮区域只保留一条。成功后可浏览器输入 http://XXX.github.io 实现远程访问。\n除本文使用的 Github Pages 外，你还可以使用 Coding 和 Gitee 等。\n#!/usr/bin/env sh  # 确保脚本抛出遇到的错误 set -e # 生成静态文件 npm run docs:build # 进入生成的文件夹 cd docs/.vuepress/dist git init git add -A git commit -m \u0026#39;deploy\u0026#39; # 如果发布到 https://XXX.github.io git push -f git@github.com:XXX/XXX.github.io.git master # 如果发布到 https://XXX.github.io/XXXX git push -f git@github.com:XXX/XXXX.git master:gh-pages cd - ","date":"2019-10-09T00:00:00Z","permalink":"https://visdot.com/warehouse/vuepress/","section":"warehouse","tags":null,"title":"Vuepress 建站教程"},{"categories":null,"contents":"Hexo 是一款快速、简洁且高效的博客框架，具有超快速度、支持 Markdown、一键部署、丰富的插件和可扩展性等特点。\n  相关站点： Hexo官网 Hexo主题 Hexo中文 Hexo仓库\n 第1步 安装 Hexo 框架 安装 Hugo 之前要确保设备装有 Git  和 Node.js (建议安装最新版本)。\n使用 npm 安装 Hexo，在终端输入如下命令。\nnpm install -g hexo-cli 由于国内可能会有网络受限的问题，使用npm会出现安装极慢或者安装失败，可以用cnpm替代。使用如下命令安装。\nnpm install -g cnpm --registry=https://registry.npm.taobao.org 然后使用cnpm替换命令中的npm，例如：使用cnpm install -g hexo-cli安装Hexo。\ncnpm install -g hexo-cli 安装完后，在终端中输入如下代码验证安装。\nhexo -v  执行安装操作前 macOS 用户终端输入sudo su命令并密码获取系统权限，Windows 用户以管理员身份运行CMD获取系统权限。\n 第2步 生成网站 首先新建并进入博客文件夹test在终端中输入如下代码：\nmkdir test cd test 在终端中输入如下代码下载Hexo文件，代码中test是所创建的网站文件夹名称，由用户自定义，以下网站名均由test代指。\nsudo hexo init 第3步 网站配置(套用主题) 在终端中输入如下命令为 hexo 安装 git 插件。\nnpm install --save hexo-deployer-git 进入网站根目录。\ncd test 在 主题商店 中选择自己喜欢的主题，使用如代码代克隆主题至本地。代码中网址为主题Github仓库地址，XXXX为主题文件夹名称。\ngit clone https://github.com/XXXXX/XXXX themes/XXXX 编辑网站根目录中_config.yml文件，修改代码theme: XXXX以确认所使用的主题。_config.yml文件默认格式如下，参考 官方文档 根据需要修改相关内容。\n# Site title: Hexo subtitle: description: author: John Doe language: timezone: Asia/Shanghai # URL url: http://yoursite.com root: / permalink: :year/:month/:day/:title/ permalink_defaults: # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting # path: Root path for your blogs index page. (default = \u0026#39;\u0026#39;) # per_page: Posts displayed per page. (0 = disable pagination) # order_by: Posts order. (Order by date descending by default) index_generator: path: \u0026#39;\u0026#39; per_page: 10 order_by: -date # Category \u0026amp; Tag default_category: uncategorized category_map: tag_map: # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination ## Set per_page to 0 to disable pagination per_page: 10 pagination_dir: page # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: 第4步 添加页面 添加新页面，页面内容采用 Markdown 格式。\nhexo new “my-first-post” 页面默认格式如下，代码中my-first-post为Markdown页面文件名，title: \u0026quot;My First Post\u0026quot;所写内容才是网站显示的标题，页面格式根据主题不同略有不同，详见主题描述。\n--- title: \u0026quot;My First Post\u0026quot; date: 2019/10/20 00:00:00 categories: - 分类1 - 分类2 tags: - 标签1 - 标签2 --- 第5步 运行网站 在终端中输入如下代码生成网页。浏览器访问 http://localhost:4000 预览效果，关闭预览使用组合键Ctrl+C退出当前命令。\nhexo s 第6步 生成静态网页 在终端中输入如下代码 清理旧文件、生成静态网页。\nhexo clean hexo g 第7步 部署 Github Pages 执行此操作前请确保拥有Github账号，并创建一个以XXX.github.io命名的空仓库，其中XXX为你的Github用户名，修改_config.yml文件中Git配置信息。\ndeploy: https://github.com/XXX/XXX.github.io type: git branch: master 在终端中输入如下命令部署页面。\nhexo d 浏览器输入http://XXX.github.io实现远程访问。除本文使用的 Github Pages 外，你还可以使用 Coding 和 Gitee 等。\n","date":"2019-09-25T00:00:00Z","permalink":"https://visdot.com/warehouse/hexo/","section":"warehouse","tags":null,"title":"HEXO 建站教程"},{"categories":null,"contents":"非苹果设备却安装使用苹果操作系统的设备，被称为黑苹果「Hackintosh」，本教程简易描述了安装黑苹果系统的步骤，并提供一些相关工具以及驱动文件的下载链接，希望能给大家安装带来帮助。\n 注意本教程需要 macOS 系统环境，如果没有 macOS 设备可使用PC安装macOS虚拟机操作。另外由于电脑配置不同，安装过程可能出现各种问题，后续驱动需进行针对性安装。本教程仅供参考。\n 第1步 制作系统安装盘 通过 AppStore 下载 macOS镜像文件，或从其他途径下载 Mojave.app 并拖入应用程序文件夹。 使用磁盘管理工具格式化U盘为GUID分区格式 Mac OS Extended（日志式），单击抹掉U盘。\n使用 UniBeast 制作 直接使用 UniBeast 开始制作，引导过程根据设备情况选择，默认选择如下图所示:\n使用 macOS 终端制作 使用终端制作安装U盘，以安装 macOS Mojave 系统为例，输入如下代码并等待制作完成，据自己实际情况修改代码内容，此代码适用于系统版本为 Mojave ，U盘名称为 Mojave。\nsudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave --applicationpath /Applications/Install\\ macOS\\ Mojave.app --nointeraction 第2步 安装原始系统引导  提示通过 UniBeast 制作的系统安装U盘会自带基础引导程序，可跳过此步骤。 使用macOS操作环境下载并安装 Clover EFI bootloader 程序，注意安装时选择正确的安装位置。\n 第3步 安装系统 将制作好的系统安装U盘插入待安装的设备，重启进入BIOS并调整下表中的选项（如果有）。然后选择系统安装U盘为启动首选项，按F10保存设置并重启设备。\n 提示进入BIOS台式机可使用按键 Del，笔记本一般使用  F2 F12 F11 Esc。\n    选项 开关     VT-d Disable   CFG-Lock Disable   Secure Boot Mode Disable   IO Serial Port Disable   XHCI Handoff Enabled    重启进入clover界面后选择U盘启动。系统安装完后进行简单地配置就能进入桌面了，建议首次安装配置过程中设备不要联网。\n第4步 详细配置系统引导 可使用 Clover Configurator 根据设备情况配置自己的 Clover 配置文件。\n第5步 系统优化 (安装驱动) 初级玩家可使用 MultiBeast 安装基本驱动，AMD显卡大部分免驱，英伟达 NVIDIA 显卡用户仅能安装macOS 10.13.6之前的系统版本才能正常 驱动。下表为部分用于优化 macOS 的驱动程序，根据需要选择下载：\n   文件名 获取 功能 描述     AirportBrcmFixup 获取 网卡驱动 博通无线网卡驱动   AppleALC 获取 声卡驱动 启用原生macOS高清音频   ATH9KFixup 获取 网卡驱动 Atheros网卡驱动   BT4LEContiunityFixup 获取 网卡驱动 开启接力，隔空投送等功能   CodecCommander 获取 声卡驱动 用于耳机与内置扬声器切换   CPUFriend 获取 电源驱动 注入CPU动态电源数据的驱动   FakePCIID 获取 硬件驱动 硬件ID仿冒驱动   DiskArbitrationFixup 获取 外设驱动 禁止“此电脑不能读取您插入的磁盘”提示   HibernationFixup 获取 电源驱动 修复休眠问题   Lilu 获取 框架注入 一些驱动的依赖   NightShiftUnlocker 获取 显示驱动 开启夜览功能   NoTouchID 获取 外设驱动 禁用触控ID支持   RTL8111_Driver 获取 网卡驱动 Realtek RTL8111/8168有线网卡驱动   SATA_unsupported 获取 外设驱动 SATA硬盘驱动   SystemMemoryFixup 获取 仿冒驱动 显示关于本机的内存标签   USB_Inject 获取 外设驱动 USB端口注入框架   VoodooI2C 获取 外设驱动 I2C触控板驱动   VoodooPS2Controller 获取 外设驱动 PS2键盘和触控板驱动   VirtualSMC 获取 仿冒驱动 SMC仿冒驱动，和FakeSMC二选一   WhateverGreen 获取 仿冒驱动 显卡注入框架，集成了很多补丁    上表内容于Github上搜集而来  这些并不能保证将所有硬件完全驱动，需要根据出现的问题上网查询解决办法，下面推荐几个较热门的黑果网站社区：\nTonymacx86 黑苹果屋 黑果小兵的部落阁 黑苹果乐园\n第6步 优化系统设置 (选做) 待更新...  第7步 性能测试 可使用 VideoProc 检测显卡驱动是否正确安装，打开程序后点击右下角设置，在通用选项卡中点击硬件加速引擎后的 选项。\n第8步 系统维护 在安装并优化好黑苹果系统之后，如果不喜欢折腾，可以关闭系统更新选项，这样会省去很多烦劳，因为更新系统存在系统损坏造成文件丢失的风险。\n但如果你喜欢常识新系统或者所要使用的软件仅支持新系统，那么你可以时间机器备份好数据，事先更新好 clover EFI 系统引导以及相关驱动，再尝试更新系统，这样能大大降低失败的几率。\n更新 clover EFI 系统引导 下载并安装 Clover Configurator。点击左侧安装更新选项，勾选保存到桌面，点击下载。\n待下载完成后点击安装包进行安装，注意要使用自定义安装，参考下图勾选相应的选项。\n 更新 Kexts 驱动 下载并安装 Clover Configurator。打开该工具，点击左侧 Kexts 安装选项，然后点击右上角刷新按钮，待其检测完毕，可更新的选项背景会变为绿色。勾选绿色选项并点击下载即可。\n","date":"2019-09-19T00:00:00Z","permalink":"https://visdot.com/warehouse/hackintosh_install/","section":"warehouse","tags":null,"title":"黑苹果系统简易安装教程"},{"categories":null,"contents":"安装黑苹果不难，难的是后期上驱动及系统功能优化，本页提供了一些相关工具以及驱动文件的下载链接，希望能给大家安装带来帮助。\nVMware Workstation Pro \rWorkstation Pro 是由 VMware 提供的虚拟机工具，用于在PC上搭建macOS系统环境。\nVMware 官网下载\nUniBeast UniBeast 是由 tonymacx86 提供的苹果安装U盘制作工具，一键式制作，方便易用。\nUniBeast 官网下载\n \r   注意\n使用UniBeast需要你具备macOS操作环境，且系统语言切换成English才能运行。\n Clover EFI bootloader Clover EFI bootloader为UEFI系统引导安装工具，是最为核心的工具之一。\nClover EFI 下载\n \r  OpenCore EFI bootloader OpenCore EFI bootloader为UEFI系统引导安装工具，是新流行起来的引导程序。\nOpenCore EFI 下载\n \r  Clover Configurator Clover Configurator 是由 mackie100projects 提供的用于编辑Clover EFI配置文件的工具，利用图形界面大大降低了配置Clover EFI的门槛。\nClover Configurator 下载\n \r  OpenCore Configurator OpenCore Configurator 是由 mackie100projects 提供的用于编辑OpenCore EFI配置文件的工具，利用图形界面大大降低了配置OpenCore EFI的门槛。\nClover Configurator 下载\n \r   注意\n使用 Clover Configurator 和 OpenCore Configurator 需要你具备macOS操作环境。\n MultiBeast MultiBeast 是由 tonymacx86 提供的苹果驱动安装工具，方便易用。\nMultiBeast 官网下载\n \r  Hackintool Hackintool 是由 headkaze 提供的黑苹果系统综合调试修复工具。\nHackintool 下载\n \r  ","date":"2019-09-17T00:00:00Z","permalink":"https://visdot.com/warehouse/hackintosh_tools/","section":"warehouse","tags":null,"title":"常用黑苹果系统安装相关工具"},{"categories":null,"contents":"全站文章列表 在分类页或者内容页里需要显示全部分类文章时使用，在页面模板 single.html 中的适当位置添加如下代码。\n\u0026lt;ul\u0026gt; {{ $pages := .Pages }} {{ $pages = .Site.RegularPages }} {{ range (where $pages \u0026#34;Section\u0026#34; \u0026#34;!=\u0026#34; \u0026#34;\u0026#34;) }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title | markdownify }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 具体某个分类的文章列表 要在内容页添加具体某个分类的文章列表，可在变量.Site.RegularPages后添加限定条件\u0026quot;Section\u0026quot; \u0026quot;XXX\u0026quot;，参考如下。\n\u0026lt;ul\u0026gt; {{ range where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;XXX\u0026#34; }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title | markdownify }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 其中Section是自定义的分类变量，XXX为具体所需指定的分类名称。\n文章列表的排列顺序 文章列表的排序默认遵循的优先级为: Weight \u0026gt; Date \u0026gt; LinkTitle \u0026gt; FilePath 。\n可通过在 range .Pages.后按需求添加下列的属性来改变列表的排序方式。\n   变量 描述     .ByWeight 根据文章头部设置的weight: 1优先级排序, 「weight」值越小排序越靠前。   .ByDate 根据文章头部设置的date: 2019-09-03创建日期排序, 时间越靠后排序越靠前。   .Reverse 可叠加前两个属性使用，也可单独使用，使其倒序排列。    ","date":"2019-09-15T00:00:00Z","permalink":"https://visdot.com/warehouse/hugo_lists/","section":"warehouse","tags":null,"title":"按需求添加 Hugo 文章列表"},{"categories":null,"contents":"原理概述 Hugo 的模板功能大大简化了对网站页面中重复元素的编辑，同时也能更方便的实现整个网站的视觉统一，他将页面中多次出现的部分独立成各个功能模块，每个模块都相当于一道「菜」，每个页面则通过不同的「菜单」来实现个性化的布局。\n这当中的「菜」就是 Hugo layouts/partials/路径下的各个组件。而「菜单」则是layouts/_default/路径下的模板文件。\n基本构成 下面是 Hugo 常见的模板及组件搭配，它包含了一个404.html404页面模板、一个index.html首页模板、一个_default文件夹内的三个默认页面模板及partials文件夹内的footer.html、header.html、head.html三个最基本的页面组件。\nthemes └── XXX └── layouts ├── 404.html ├── _default │ ├── baseof.html │ ├── list.html │ └── single.html ├── index.html └── partials ├── head.html ├── header.html └── footer.html 整体策略 当我们在建立多页面的网站时，首先要对整个网站的构成和布局有个大体概念，首先对各页面分类，找出布局相同的页面，给他们指定相同的页面模板。\n 在具体操作环节，初学者可先不做组件独立，直接在页面模板中编辑出页面所要展示的全部内容，待该页面调整完毕，做其他页面模板时，如果用到了之前页面的某个元素，则将之前页面模板的该元素独立出来做成组件，然后引用进这两个页面模板。\n 然后再找出那些在不同页面中重复出现的相同元素，进一步分类，把他们单独摘出来做成独立的组件，这样不同的页面就能通过页面模板提取组件。\n自定义页面模板 在将页面分好类后，就要给他们定制专属页面模板了。\n在模板文件中使用下述代码导入组件，其中组件名为header，以.html为后缀名。\n{{ partial \u0026#34;header.html\u0026#34; . }} 下面是一组较基本的 Hugo 模板配置，他包含baseof.html、list.html、single.html、terms.html四个页面模板。\n//baseof.html  {{ partial \u0026#34;header.html\u0026#34; . }} {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} //list.html {{ partial \u0026#34;header.html\u0026#34; . }} {{ .Content }} \u0026lt;ul\u0026gt; {{ $pages := .Pages }} {{ if .IsHome }}{{ $pages = .Site.RegularPages }}{{ end }} {{ range (where $pages \u0026#34;Section\u0026#34; \u0026#34;!=\u0026#34; \u0026#34;\u0026#34;) }} \u0026lt;li\u0026gt; \u0026lt;span class=\u0026#34;date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;2006/01/02\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title | markdownify }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} //single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title | markdownify }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} //terms.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;ul class=\u0026#34;terms\u0026#34;\u0026gt; {{ range .Data.Terms }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34;\u0026gt;{{ .Page.Title }}\u0026lt;/a\u0026gt; ({{ .Count }}) \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} 基本语法介绍 循环 {{ range 变量}} 内容 {{ end }} //遍历「变量」，输出「内容」。 条件判断 {{ if 条件 }} 结果 {{ end }} //如果「条件」成立则输出「结果」，否则不输出。  {{ if not 条件 }} 结果 {{ end }} //如果「条件」不成立则输出「结果」，否则不输出。  {{ if 条件 }} 结果1 {{else}} 结果2 {{end}} //如果「条件」成立则输出「结果1」，否则输出「结果2」。 通过简单的「条件判断」可将上文提到的基本模板中的前两个合二为一，当页面为首页时使用baseof.html模板，否则使用list.html模板，写法如下。\n{{ partial \u0026quot;header.html\u0026quot; . }} {{if not .IsHome }} \u0026lt;h1\u0026gt;{{ .Title | markdownify }}\u0026lt;/h1\u0026gt; {{ end }} {{ .Content }} \u0026lt;ul\u0026gt; {{ $pages := .Pages }} {{ if .IsHome }}{{ $pages = .Site.RegularPages }}{{ end }} {{ range (where $pages \u0026quot;Section\u0026quot; \u0026quot;!=\u0026quot; \u0026quot;\u0026quot;) }} \u0026lt;li\u0026gt; \u0026lt;span class=\u0026quot;date\u0026quot;\u0026gt;{{ .Date.Format \u0026quot;2006/01/02\u0026quot; }}\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026quot;{{ .RelPermalink }}\u0026quot;\u0026gt;{{ .Title | markdownify }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ partial \u0026quot;footer.html\u0026quot; . }} 注释写法 {{/* 注释 */}} ","date":"2019-09-14T00:00:00Z","permalink":"https://visdot.com/warehouse/hugo_template/","section":"warehouse","tags":null,"title":"Hugo 模板的原理及使用"},{"categories":null,"contents":"增加 Code 高亮 打开根目录下的 config.yaml，添加以下条目即可使用 Hugo 预制高亮效果。\npygmentsUseClasses:false如果想使用更多其他风格的效果可使用第三方的 highlight.js 插件，从官网选择需要的语言后下载文件。解压压缩包，在页面中引入highlight.pack.js和自己选择风格对应的css文件。\n\u0026lt;!-- head --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/highlight.css\u0026#34;/\u0026gt; \u0026lt;!-- body --\u0026gt; \u0026lt;script src=\u0026#34;/js/highlight.pack.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;hljs.initHighlightingOnLoad();\u0026lt;/script\u0026gt;  文件引入路径根据项目不同进行相应改动。\n 增加文章字数显示 本功能利用了 .WordCount 这个变量，在页面模板 single.html 标题附近的适当位置添加如下代码即可。\n\u0026lt;span\u0026gt; {{ .WordCount }} Words\u0026lt;/span\u0026gt; 如果识别出的字数明显少于文章字数，可能是没有计算中文字符，可在每个页面头部的信息区添加如下参数。\nisCJKLanguage: true 增加翻页按钮 本功能利用了 .Next、.Prev 这两个变量，在页面模板 single.html 的适当位置添加如下代码即可。\n{{with .PrevInSection}}\t\u0026lt;ahref=\u0026#34;{{.Permalink}}\u0026#34;\u0026gt;前一页\u0026lt;/a\u0026gt; {{end}} {{with .NextInSection}} \u0026lt;a href=\u0026#34;{{.Permalink}}\u0026#34;\u0026gt;后一页\u0026lt;/a\u0026gt; {{end}} 下面是我使用的翻页按钮配置，供大家参考。\nHTML\n\u0026lt;div class=\u0026quot;pre-next\u0026quot;\u0026gt; {{with .PrevInSection}}\t\u0026lt;a class=\u0026quot;pre-next-btn bg\u0026quot; href=\u0026quot;{{.Permalink}}\u0026quot;\u0026gt;\u0026lt;svg t=\u0026quot;1605930649708\u0026quot; class=\u0026quot;icon\u0026quot; viewBox=\u0026quot;0 0 1024 1024\u0026quot; version=\u0026quot;1.1\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; p-id=\u0026quot;2619\u0026quot; width=\u0026quot;22\u0026quot; height=\u0026quot;22\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;M589.088 790.624L310.464 512l278.624-278.624 45.248 45.248L400.96 512l233.376 233.376z\u0026quot; fill=\u0026quot;#515151\u0026quot; p-id=\u0026quot;2620\u0026quot;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt;前一页\u0026lt;/a\u0026gt; {{end}} {{with .NextInSection}} \u0026lt;a class=\u0026quot;pre-next-btn bg\u0026quot; href=\u0026quot;{{.Permalink}}\u0026quot;\u0026gt;后一页\u0026lt;svg t=\u0026quot;1605930744277\u0026quot; class=\u0026quot;icon\u0026quot; viewBox=\u0026quot;0 0 1024 1024\u0026quot; version=\u0026quot;1.1\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; p-id=\u0026quot;2981\u0026quot; width=\u0026quot;22\u0026quot; height=\u0026quot;22\u0026quot;\u0026gt;\u0026lt;path d=\u0026quot;M434.944 790.624l-45.248-45.248L623.04 512l-233.376-233.376 45.248-45.248L713.568 512z\u0026quot; fill=\u0026quot;#515151\u0026quot; p-id=\u0026quot;2982\u0026quot;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt;\u0026lt;/a\u0026gt; {{end}} \u0026lt;/div\u0026gt; CSS\n.pre-next { display: flex; text-align: center; justify-content: space-between; align-items: center; } .pre-next-btn { width: 46%; padding: 10px 0; border-radius: 4px; border: 1px solid #dadce0; -moz-transition: all .3s; -webkit-transition: all .3s; transition: all .3s; background-color: #fff; } .pre-next-btn:hover { box-shadow: 0 3px 10px rgba(0,0,0,.1); } ","date":"2019-09-05T00:00:00Z","permalink":"https://visdot.com/warehouse/hugo_qa/","section":"warehouse","tags":null,"title":"Hugo 常见问答 Q\u0026A"},{"categories":null,"contents":"Hugo是由Go语言实现的静态网站生成器，简单、易用、高效、易扩展、快速部署,本站即为 Hugo 博客框架搭建。\n  相关站点： Hugo官网 Hugo主题 Hugo中文 Hugo仓库\n 第1步 安装Hugo框架 首先根据自己的系统参照下述方法进行安装。\nmacOS macOS操作系统下直接使用 Homebrew 安装，在终端中输入如下代码：\nbrew install hugo 在终端输入如下命令安装 Homebrew。\n/bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot; 国内用户如果下载缓慢或安装失败，可使用国内加速源下载。\n/bin/zsh -c \u0026quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\u0026quot; Windows 在 Hugo Releases 下载最新发布对应操作系统的ZIP，将所有内容提取到C:\\Hugo\\bin目录中，包含可执行文件hugo.exe、LICENSE和README.md。然后将Hugo添加到Windows的PATH设置中。\n 右键单击「开始」按钮 单击「系统」 单击左侧的「高级系统设置」 单击底部的「环境变量\u0026hellip;」按钮 在「用户变量」部分中找到以PATH开头的行（PATH全部大写） 双击「PATH」 单击「新建…」按钮 键入C:\\Hugo\\bin，完成输入后按「回车」 在每个窗口中单击「确定」退出  Linux Linux操作系统下直接使用Homebrew 安装，在终端中输入如下代码:\nbrew install hugo 在终端输入如下命令安装 Homebrew。\n/bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot; 国内用户如果下载缓慢或安装失败，可使用国内加速源下载。\n/bin/zsh -c \u0026quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\u0026quot; OpenBSD OpenBSD通过pkg_add添加Hugo的软件包：\ndoas pkg_add hugo 源码安装 执行源码安装前请确保安装有 Git 、Mercurial 、Go 。在 Hugo Releases下载对应操作系统的Hugo安装文件，执行安装。\n设置好GOPATH环境变量，获取源码(源码会下载到GOPATH/src目录)并编译。\nexport GOPATH=$HOME/go go get -v github.com/spf13/hugo 安装完Hugo后，在终端中输入如下代码验证安装。\nhugo version 第2步 生成网站 在终端中输入如下代码生成网页。代码中test是所创建的网站文件夹名称，由用户自定义，以下网站名均由test代指。\nhugo new site test 第3步 网站配置(套用主题) 进入网站根目录\ncd test 安装Git（用于下载主题及安装）\ngit init 在主题商店中选择自己喜欢的主题，查看其Github仓库地址，使用如下代码克隆主题至本地。代码中网址为主题Github仓库地址，XXXX为主题文件夹名称。\nHugo 主题商店地址: Hugo 官方主题商店、Hugo 中文主题商店。\ngit clone https://github.com/XXXXX/XXXX themes/XXXX 编辑网站根目录中config.toml文件，添加代码theme = \u0026quot;XXXX\u0026quot;以确认所使用的主题。config.toml文件默认格式如下：\nbaseURL = \u0026quot;https://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;test\u0026quot; theme = \u0026quot;XXXX\u0026quot; 第4步 添加页面 添加新页面，页面内容采用 Markdown 格式。\nhugo new posts/my-first-post.md 页面默认格式如下，代码中my-first-post为Markdown页面文件名，title: \u0026quot;My First Post\u0026quot;所写内容才是网站显示的标题，页面格式根据主题不同略有不同，详见主题描述。\n--- title: \u0026quot;My First Post\u0026quot; date: 2019-10-20T00:00:00+01:00 draft: true --- 第5步 运行网站 完成上述操作后，可在终端中输入如下代码运行网站。浏览器访问 http://localhost:1313 预览效果。你可在预览的同时对网站进行编辑，网页将会实时展示修改后的效果，如果出现刷新问题可通过Ctrl+R进行强制刷新。\nhugo server -D 第6步 生成静态网页 在终端中输入如下代码生成静态网页。这个命令并不会生成草稿页面，需要生成的页面请去掉页面头部的draft: true。\n默认情况下生成的文件会输出到test/public/目录下，你可将改文件夹部署到服务器以实现远程访问，也可使用本文第7步所说的方法。\nhugo 第7步 部署 Github Pages 执行此操作前请确保拥有Github账号，并创建一个以XXX.github.io命名的空仓库，其中XXX为你的Github用户名。在终端中输入如下代码生成最终页面。\nhugo --theme=XXXX --baseUrl=\u0026quot;http://XXX.github.io/\u0026quot; 在终端中输入下列代码将最终页面部署到 Github Pages。\ncd public git init git remote add origin https://github.com/XXX/XXX.github.io.git git add -A git commit -m \u0026quot;first commit\u0026quot; git push -u origin master 浏览器输入http://XXX.github.io实现远程访问。除本文使用的 Github Pages 外，你还可以使用 Coding 和 Gitee 等。\n第8步 日常维护  本文介绍部分操作仅限于 macOS 系统环境。\n 替换 Hugo 版本方法 打开页面 github.com/gohugoio/hugo/releases ，下载 hugo 框架安装文件。比如说你需要安装 Hugo v.0.56.0 版本，那么翻到对应版本号下的 Assets 列表，下载其中对应操作系统的 hugo_0.56.0_macOS-64bit.tar.gz 安装包。\n默认下载到 Download 文件夹，解压。会得到三个文件 hugo 、LICENSE.md、 README.md。\n使用访达 Go 功能输入并进入如下路径：\n/usr/local/bin/hugo 如果设备未安装过 hugo 框架，则进入 /usr/local/路径，并在 local 文件夹中新建 bin 文件夹，在 bin 文件夹中新建 hugo 文件夹。\n将解压获得的 hugo 文件移入新建 hugo 文件夹中，如果安装过则替换原有文件即可覆盖安装。\nHugo 版本降级方法 从 Homebrew 官方仓库 找到所需要 hugo 版本对应的链接。\nhttps://github.com/Homebrew/homebrew-core/raw/cf67d08dd1a6201be82ac93feeabe2fe834f50ab/Formula/hugo.rb 假如你要降级到 hugo v.057.0，通过查找得到相应地址，然后打开终端，输入如下代码：\nbrew unlink hugo brew install https://github.com/Homebrew/homebrew-core/raw/cf67d08dd1a6201be82ac93feeabe2fe834f50ab/Formula/hugo.rb 卸载 Hugo 框架 打开终端并输入如下命令即可卸载 hugo 框架。\nbrew uninstall hugo --force ","date":"2019-09-02T00:00:00Z","permalink":"https://visdot.com/warehouse/hugo_install/","section":"warehouse","tags":null,"title":"从零开始 Hugo 建站教程"},{"categories":null,"contents":"前端的作用于采集输入信息，后端进行处理。计算机程序的界面样式，视觉呈现属于前端。本页主要记录我学习 Html 和 CSS 过程中觉得实用的笔记。\nHtml 笔记 HTML 称为超文本标记语言，是一种标识性的语言。它包括一系列标签，通过这些标签可以将网络上的文档格式统一，使分散的资源连接为一个逻辑整体，下图为HTML基本框架示意图。\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;eyecus\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;hello world！\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;hello \u0026lt;a\u0026gt;eyecus\u0026lt;/a\u0026gt;！\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;1.XXXX\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;2.XXXX\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3.XXXX\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  注意对于中文网页需要使用 \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; 声明编码，否则会出现乱码。\n \u0026lt;!DOCTYPE html\u0026gt; ：声明为html5文档 \u0026lt;html\u0026gt;：html页面的根元素  \u0026lt;head\u0026gt;：包含了文档的元(meta)数据  \u0026lt;title\u0026gt;：包含了页面标题  \u0026lt;body\u0026gt;：包含了可见的页面内容  \u0026lt;h1\u0026gt;：一级标题标签  \u0026lt;p\u0026gt;：段落标签\n网站信息 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;世佳\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;copyright\u0026#34; content=\u0026#34;\u0026amp;copy; 2019 eyecus.\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;世佳,视由,eyecus\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;date\u0026#34; content=\u0026#34;2019-09-01T00:00:00+00:00\u0026#34;\u0026gt; 文本格式标签    标签 描述 预览     \u0026lt;b\u0026gt; 粗体文本 原文 文本 Text\n   \u0026lt;em\u0026gt; 着重文字 原文 文本 Text\n   \u0026lt;i\u0026gt; 斜体字 原文 文本 Text\n   \u0026lt;small\u0026gt; 小号字 原文 文本 Text\n   \u0026lt;strong\u0026gt; 加粗 原文 文本 Text\n   \u0026lt;sub\u0026gt; 下标字 原文 文本 Text\n   \u0026lt;sup\u0026gt; 上标字 原文 文本 Text\n   \u0026lt;ins\u0026gt; 下划线 原文 文本 Text\n   \u0026lt;del\u0026gt; 删除字 原文 文本 Text\n    常见属性    标签 描述     class 为html元素定义一个或多个类名   id 定义元素的唯一id   style 规定元素的行内样式   title 描述了元素的额外信息    常用功能 给元素增加链接\n\u0026lt;a href=\u0026quot;default.html\u0026quot;\u0026gt; XXXX \u0026lt;/a\u0026gt; 换行\n\u0026lt;p\u0026gt; XXXX\u0026lt;/br\u0026gt;XXXX \u0026lt;/p\u0026gt; 添加水平线\n\u0026lt;p\u0026gt;XXXX\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;p\u0026gt;XXXX\u0026lt;/p\u0026gt; 添加注释\n\u0026lt;!-- XXXX --\u0026gt; 添加图片，并定义尺寸\n\u0026lt;img src=\u0026quot;/images/logo.png\u0026quot; width=\u0026quot;250\u0026quot; height=\u0026quot;200\u0026quot; /\u0026gt; \u0026nbsp  CSS 笔记 层叠样式表 Cascading Style Sheets 是一种用来表现HTML或XML等文件样式的计算机语言。不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。\n其中p ：选择器 是需要改变样式的元素；color：属性 是需要改变的样式属性；red ：值 是属性的描述值。\np { color: red; text-align: center; } 盒子模型 上图是一个标准盒子模型的示意图，可以看出每个盒子由四个区域组成，由里到外依次是内容、内边框、边框和外边框。\n   标签名 名称 描述     margin 外边距 清除边框外的区域，外边距是透明的。   border 边框 围绕在内边距和内容外的边框。   padding 内边框 清除内容周围的区域，内边距是透明的。   content 内容 盒子的内容，显示文本和图像。   top 顶部 用于确定方向。   bottom 底部 用于确定方向。   left 左边 用于确定方向。   right 右边 用于确定方向。    内容 content 内容区域装着元素想要展示的的基本内容，可以是文本、图片、视频等，可通过调整所装的内容尺寸来改变内容区域的尺寸。下列插入两个 90px 宽,60px 高的方块。\nA B   内边框 cpadding 内边框算是内容的拓展，负责给内容排开周围的区域的其他元素，常用作“留白”。可通过 padding-top、padding-right、padding-bottom、padding-left、padding来控制内边框的粗细。\n我们发现两个方块默认情况下紧贴在一起，可以通过增加内边框使他们看起来更协调。绿色区域仅为表示内边框，实际默认为透明。\n.box { padding: 10px; } A  B   你还可以使用 padding 属性，一次性输入多个数值来调整四周的内边框，或者在后面增加方位来单独调整特定方位。\n.box { padding: 10px 20px 30px 40px; } A   .box { padding-top: 10px; } A   边框 border 边框算是内边框的拓展，是盒子模型实质上的边界，可通过 border-width来控制边框粗细，同样在后面增加方位可以单独调整特定方位。也可给定线形: solid(实线) none(无边框) double(双线) dashed(虚线) dotted(点划线)来控制边框风格。\n.box { border: 10px solid #ced4da; } A  外边框 margin 外边框算是边框的拓展，它其实已经不算做该元素的范围，可通过 margin-width来控制边框粗细，同样在后面增加方位可以单独调整特定方位。\n不同元素的外边框是可以重叠的，可对比下图与内边框图观察两方块交界处的宽度来理解它们的不同之处。\n.box { margin: 10px; } A  B   位置属性 Position 进行 CSS 布局前，还得了解 position 位置属性，它用于确定元素的定位方式，选择合适的定位方式能快速实现布局需求。\n.box{ position: absolute; left: 20px; top: 30px; }    属性 描述 值举例     position 位置 static(静态)relative(相对定位)fixed(固定定位)absolute(绝对定位)sticky(粘性定位)    浮动属性 Float 在布局过程中，有事需要两个元素处于同一行，这时就要用到 float 和 clear 属性，它用于确定元素是否浮动。\n.box{ float: left; }    属性 描述 值举例     float 浮动 left(左侧浮动)right(右侧浮动)none(取消浮动)   clear 取消浮动 left(取消左侧浮动)right(取消右侧浮动)both(取消两侧浮动)none(允许浮动)    弹性布局 Flex 是 Flexible Box（弹性布局）的缩写，给盒子指定 Flex 属性能大大提升布局时的灵活性。\n.box{ display: flex; } 容器属性 container 使用 Flex 布局的盒子称作 Flex容器，简称 容器 (container)。它所包含的全部子元素被称作 Flex项目，简称 项目 (item)。容器具有以下属性：\n   属性 描述 值举例     flex-direction 轴线方向 row(水平左至右)row-reverse(水平右至左)column(垂直上至下)column-reverse(垂直下至上)   flex-wrap 换行 nowrap(不换行)wrap(上至下换行)wrap-reverse(下至上换行)   flex-flow 主轴方向 row(水平左至右)row-reverse(水平右至左)column(垂直上至下)column-reverse(垂直下至上)   justify-content 水平对齐 flex-start(左对齐)flex-end(右对齐)center(居中)space-between(两端对齐)space-around(等间距)   align-items 垂直对齐 flex-start(上对齐)flex-end(下对齐)center(居中)baseline(文本基线对齐)stretch(占满高度)   align-content 轴线对齐 flex-start(上对齐)flex-end(下对齐)center(居中)space-between(两端对齐)space-around(等间距)stretch(占满高度)    项目属性 item    属性 描述 值举例     order 排序 0(数字,小数靠前)   flex-grow 放大比例 0(数字,按比例分配空间)   flex-shrink 缩小比例 1(数字,按比例分配空间)   flex-basis 主轴空间 auto(自动) 100px(尺寸)   align-self 特例对齐 flex-start(上对齐)flex-end(下对齐)center(居中)baseline(文本基线对齐)stretch(占满高度)    项目属性中的 flex-grow、flex-shrink 和 flex-basis可以简写为 flex，写法如下： .item { flex: 0 0 100px; }\n文本样式    属性 功能描述 值举例     color 颜色 #ffffff(颜色代码)   direction 文本方向 ltr(左到右) rtl(右到左)   letter-spacing 字间距 -3px(数值)   line-height 行高 200%(百分数)   text-align 对齐 justify(两端对齐) center(居中) left(左对齐) right(右对齐)   text-decoration 文本修饰 overline wavy red(上划红色波浪线) line-through(删除线) underline(下划线)   text-indent 首行缩进 3px(数值)   text-shadow 文本阴影 2px 2px #ff0000(XY偏移值、颜色代码)   text-transform 字母大小写 uppercase(大写) capitalize(大小写) lowercase(小写)   vertical-align 垂直对齐 baseline(在父元素的基线上)sub(垂直对齐文本下标)super(垂直对齐文本上标)top( 顶端与行中最高元素顶端对齐)text-top( 顶端与父元素字体顶端对齐)middle(在父元素的中部)bottom(底端与行中最低的元素顶端对齐)text-bottom(底端与父元素字体底端对齐)-30%(使用line-height的值来排列此元素)inherit(从父元素继承属性)   white-space 空白区域处理 normal(忽略) pre(保留) nowrap(不换行直到\u0026lt;/br\u0026gt;) pre-wrap(保留并正常换行) pre-line(合并空白符) inherit(从父元素继承属性)   word-spacing 字间距 3px(数值)    字体样式  body { font-family: \u0026#39;Times New Roman\u0026#39;, sans-serif; src: url(\u0026#39;TimesNewRoman.ttf\u0026#39;); }  提示\n除了加载本地字体外，你还可以选择直接调用 Google Fonts 在线字体库。\n    属性 功能描述 值举例     font-family 字体系列 \u0026quot;Times New Roman\u0026quot;(字体名) sans-serif(无衬线字体)  serif(衬线字体)   font-style 字体样式 normal(正常) italic(斜体) oblique(倾斜)   font-size 字体大小 40px(数值) 2.5em(数值,px/16=em) 100%(百分数,body属性值*100%)   font-weight 字体粗细 200(整百分数)    链接样式 a:hover { text-decoration: underline; background-color: #666666; } a:after { content: \u0026#34;»\u0026#34;; }    标签名 功能描述     :link 正常，未访问过的链接   :visited 已访问过的链接   :hover 鼠标放在链接上   :active 链接被点击时   :focus 链接被点击后   :before 在元素前增添元素   :after 在元素后增添元素    新窗口打开链接 \u0026lt;head\u0026gt; \u0026lt;base target=\u0026#34;_blank\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;https://www.eyecus.com/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;视由\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; .eyecus-btn a:active { text:expression(target=\u0026#34;_blank\u0026#34;); } 背景样式 body { background-color: #ffffff; }    属性 功能描述 值举例     background-color 背景颜色 #ffffff(颜色代码)   background-image 背景图像 url('paper.gif')(图片URL)   background-repeat 背景图像排列 repeat-x(水平平铺) repeat-y(垂直平铺) no-repeat(不平铺)   background-position 背景图像定位 right top(左上角)   background-attachment 背景图像滚动 flase(假) true(真)    阴影样式 .nav { box-shadow: inset 10px -10px 3px 1px #666666; }    属性 功能描述 值举例     inset 内阴影 inset(内阴影)   h-shadow 水平方向偏移 10px(数值)   v-shadow 水平方向偏移 -10px(数值)   blur 模糊距离 3px(数值)   spread 阴影尺寸 1px(数值)   color 阴影颜色 #666666(颜色代码)    边框样式 p { border: 3px solid #666666; border-radius: 15px 50px 30px 3px; }    属性 功能描述 值举例     border-width 边框宽度 3px(数值)   border-style 边框样式 solid(实线) none(无边框) double(双线) dashed(虚线) dotted(点划线)   border-color 边框颜色 #666666(颜色代码)   border-radius 倒圆角 15px 50px 30px 3px(数值 左上 右上 右下 左下)    动画延迟 .btn:hover { box-shadow: 3px 5px 8px rgba(0, 0, 0, 0.1); transition: all 0.3s ease-in-out; } 滚动条样式 禁用竖向滚动条 body { overflow:scroll; overflow-y:hidden; }\n自定义滚动条 *::-webkit-scrollbar { width: 5px; height: 5px; } *::-webkit-scrollbar-thumb { border-radius: 10px; -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2); background: #535353; } *::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 1px rgba(0,0,0,0); border-radius: 10px; background: #ccc; }\n常用功能  添加渐变色，线性渐变 / 圆心渐变 background: -webkit-gradient(linear, left top, left bottom, from(#3874AF), to(#3598DB)); background-image: linear-gradient(-180deg,#fafbfc,#eff3f6 90%); linear-gradient(#D1EEFC, #81F3FD); radial-gradient(#FEFD58, #71FCA6, #52EDC7);\n 使链接在同一行显示 a { word-break: keep-all; }\n 禁止浏览器为被激活的输入框添加边框 *:focus { outline: none; }\n 载入本地字体 @font-face { font-family:\u0026#39;Awesome Font\u0026#39;; font-style: normal; font-weight: 400; src: local(\u0026#39;Awesome Font\u0026#39;), url(\u0026#39;/fonts/awesome.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), url(\u0026#39;/fonts/awesome.woff\u0026#39;) format(\u0026#39;woff\u0026#39;), url(\u0026#39;/fonts/awesome.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;), url(\u0026#39;/fonts/awesome.eot\u0026#39;) format(\u0026#39;embedded-opentype\u0026#39;); } @font-face { font-family:\u0026#39;Awesome Font\u0026#39;; font-style: italic; font-weight: 400; src: local(\u0026#39;Awesome Font Italic\u0026#39;), url(\u0026#39;/fonts/awesome-i.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;), url(\u0026#39;/fonts/awesome-i.woff\u0026#39;) format(\u0026#39;woff\u0026#39;), url(\u0026#39;/fonts/awesome-i.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;), url(\u0026#39;/fonts/awesome-i.eot\u0026#39;) format(\u0026#39;embedded-opentype\u0026#39;); }\n\u0026nbsp  Bootstrap4 笔记 Bootstrap 是一套流行的前端框架，轻松构建对移动设备很友好的响应式网站。内置了大量常用界面设计组件，大大简化了建站的过程。\n 相关站点：框架官网 框架中文 菜鸟教程 框架仓库\n 加载框架 CSS 复制如下代码到HTML的\u0026lt;head\u0026gt;标签。\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026#34; integrity=\u0026#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; JS 复制如下代码到HTML的\u0026lt;/body\u0026gt;标签之前。\n\u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.3.1.slim.min.js\u0026#34; integrity=\u0026#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\u0026#34; integrity=\u0026#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 简单 Bootstrap 实例\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026#34; integrity=\u0026#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;title\u0026gt;XXXX\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;XXXX\u0026lt;/h1\u0026gt; \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.3.1.slim.min.js\u0026#34; integrity=\u0026#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\u0026#34; integrity=\u0026#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 容器 容器是Bootstrap中最基本的布局基础。会自动根据屏幕大小来选择合适的宽度。\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; XXXX \u0026lt;/div\u0026gt;    标签 名称 描述     container 容器 自动根据屏幕大小来选择合适的宽度   container-fluid 全宽容器 跨越 viewport 的整个宽度    响应式断点 响应式断点指使用少量媒体查询为布局和界面创建合理的断点，以此动态调节显示界面尺寸。\n 下述代码中具体尺寸更具需要进行更改。\n @media (min-width: 576px) and (max-width: 767.98px) { } @media (min-width: 768px) and (max-width: 991.98px) { } @media (min-width: 992px) and (max-width: 1199.98px) { } 层叠覆盖关系 Z-index值用于正确地分层，确然各个元素的层叠覆盖关系。 .XXXX { z-index: X; }\nJavaScript 笔记 JavaScript 作为 Web 浏览器的唯一编程语言，负责让网页“动”起来。它常用于构建具有动态功能的交互式网站。本页转载记录一些能实现一定功能的实例。\n行内式写法 \u0026lt;body\u0026gt; \u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Button\u0026#34; onclick=\u0026#34;alert(\u0026#39;text\u0026#39;)\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; 内嵌式写法 \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; alert(\u0026#39;text\u0026#39;) \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; 外部式写法 新建一个 XXX.js 文件，然后在 html 中引用它。 \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;XXX.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt;\n注释方法 // 单行注释 快捷键：ctrl + / /* 多行注释 快捷键：shift + alt + a 多行注释 */ 输入输出语句 // 输入框 prompt(\u0026#39;XXX\u0026#39;); // 弹窗 alert(\u0026#39;XXX\u0026#39;); // console 控制台输出 console.log(\u0026#39;XXX\u0026#39;);  变量 变量是用于存放数据的 容器，是程序在设备内存中申请的一块存放数据的空间。\n  声明变量：var XXX;（声明名称是 XXX 的变量）\n  变量赋值：XXX = XX;（将 XXX 变量 赋值为 XX）\n  变量初始化：var XXX ='XX';（声明一个变量 XXX 并赋值为 XX）\n  var myName = prompt(\u0026#39;请输入姓名\u0026#39;); alert(myName);  需要同时声明多个变量时可只写一个 var，变量间用逗号隔开。\n 变量命名规则 变量名称由英语字母大小写 A-Z,a-z、数字 0-9、下划线 _、美元符号 $ 组成。\n 字母需区分大小写： Name name 不能以数字开头： 996ICU 不能使用保留词： var for 使用有意义的英文单词： mingzi -\u0026gt; name 遵循驼峰命名法： myBlog  数据类型 JavaSpript 的数据主要分为 简单数据类型 和 复杂数据类型。\n简单数据类\n   类型 说明 默认值     Number 数字型，17、0.17 0   String 字符串类型，\u0026ldquo;视由\u0026rdquo; \u0026quot;\u0026quot;   Boolean 布尔值类型，ture、false false   Undefinend 未定义数据类型 undefinend   Null 空值 null    数字型 Number 数字型可以是整数也可以是小数，同时支持各种进制表示，其中在数字前加 0 为八进制，加 0x 为十六进制。\nNaN 表示非数字，isNaN() 可用于判断是否为非数字，是则返回 false，反之返回 true。\nconsole.log(isNaN(0.17)); // 显示 falsh  字符串型 String 字符串型使用引号包含表示，推荐使用单引号，当存在多个引号嵌套时使用 外单内双 或者 内双外单，需要实现其他功能可参考下列字符串转义符表。\n   转义符 说明     \\n 换行符   \\ 斜杠   ' 单引号   \u0026quot; 双引号   \\t 缩进   \\b 空格    字符串的拼接使用加号 + 连接即可，任何数据类型与字符串型拼接都将变成字符串型。\nconsole.log(\u0026#39;视由\u0026#39; + \u0026#39;文化\u0026#39;); // 显示 视由文化 console.log(\u0026#39;视由\u0026#39; + 12); // 显示 视由12 console.log(\u0026#39;12\u0026#39; + 12); // 显示 1212 console.log(12 + 12); // 显示 24  布尔型 Boolean 布尔型数据包括 ture 和 false，其中当参与加法运算时 ture 当 1 来看， flase 当 0 来看。\n未定义数据类型 Undefinend 一个变量声明未赋值，则其类型为未定义数据类型。\nvar X = undefinend; console.log(\u0026#39;X\u0026#39; + \u0026#39;视由\u0026#39;); // 显示 undefinend视由 console.log(\u0026#39;X\u0026#39; + 12); // 显示 NaN  空值 NaN 当变量的值为 null，则它的数据类型为空值。\nvar X = null; console.log(\u0026#39;X\u0026#39; + \u0026#39;视由\u0026#39;); // 显示 null视由 console.log(\u0026#39;X\u0026#39; + \u0026#39;12\u0026#39;); // 显示 12  获取数据信息  可以使用 length 函数获取字符串长度。  var X = \u0026#39;XXXXXX\u0026#39;; console.log(X.length); // 显示 6   可以使用 typeof 函数获取字符串长度。  var X = \u0026#39;XXXXXX\u0026#39;; console.log(typeof X); // 显示 string  数据类型的转换  将数据转换为字符串型，下列三种方法均可，推荐使用方法三 隐式转换。  var X = 12; console.log(String(X)); // 显示 12 (字符串型)  var X = 12; var Y = X.toString(); console.log(Y); // 显示 12 (字符串型)  var X = 12; console.log(X + \u0026#39;\u0026#39;); // 显示 12 (字符串型)   将数据转换为数值型，其中 parseInt 函数会将小数转换为向下取整的整数，推荐使用方法四 隐式转换。  console.log(parseInt(\u0026#39;12\u0026#39;)); // 显示 12 (数值型) console.log(parseInt(12.7)); // 显示 12 (数值型) console.log(parseInt(12px)); // 显示 12 (数值型) console.log(parseInt(px12)); // 显示 NaN (空值)  console.log(parseFloat(\u0026#39;12\u0026#39;)); // 显示 12 (数值型) console.log(parseFloat(12.7)); // 显示 12.7 (数值型) console.log(parseFloat(12px)); // 显示 12 (数值型) console.log(parseFloat(px12)); // 显示 NaN (空值)  console.log(Number(\u0026#39;12\u0026#39;)); // 显示 12 (数值型)  console.log(\u0026#39;12\u0026#39; - 0); // 显示 12 (数值型) console.log(\u0026#39;12\u0026#39; * 1); // 显示 12 (数值型) console.log(\u0026#39;17\u0026#39; - \u0026#39;12\u0026#39;); // 显示 5 (数值型)  部分实例 互换两个变量的值 var temp; //临时变量 var A; var B; temp = A; A = B; B = temp;  点击按钮替换文本 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; function myFunction() { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = \u0026#34;2\u0026#34;; } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;简单计算\u0026lt;/h2\u0026gt; \u0026lt;p id=\u0026#34;demo\u0026#34;\u0026gt;1+1=？。\u0026lt;/p\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;myFunction()\u0026#34;\u0026gt;计算\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 点击按钮复制文本 \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .wrapper {position: relative;} #input {position: absolute;top: 0;left: 0;opacity: 0;z-index: -10;} \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;p id=\u0026#34;text\u0026#34;\u0026gt;需要复制的文本\u0026lt;/p\u0026gt; \u0026lt;textarea id=\u0026#34;input\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button onclick=\u0026#34;copyText()\u0026#34;\u0026gt;按钮显示文本\u0026lt;/button\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function copyText() { var text = document.getElementById(\u0026#34;text\u0026#34;).innerText; var input = document.getElementById(\u0026#34;input\u0026#34;); input.value = text; input.select(); document.execCommand(\u0026#34;copy\u0026#34;); alert(\u0026#34;点击后弹出消息框文本\u0026#34;); } \u0026lt;/script\u0026gt; 顶部线形加载进度条 \u0026lt;script src=\u0026#34;http://cdn.bootcss.com/pace/1.0.2/pace.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; { function getElementsByClass(key){ var arr = new Array(); var tags=document.getElementsByTagName(\u0026#34;*\u0026#34;); for(var i=0;i\u0026lt;tags.length;i++){ if(tags[i].className.match(new RegExp(\u0026#39;(\\\\s|^)\u0026#39;+key+\u0026#39;(\\\\s|$)\u0026#39;))){ arr.push(tags[i]); } } return arr; } var timer = window.setInterval(function(){ var el = getElementsByClass(\u0026#39;pace\u0026#39;); if(el.length\u0026gt;0){ var a = document.createElement(\u0026#39;div\u0026#39;); a.setAttribute(\u0026#39;class\u0026#39;, \u0026#39;spinner\u0026#39;); var b = document.createElement(\u0026#39;div\u0026#39;); b.setAttribute(\u0026#39;class\u0026#39;, \u0026#39;spinner-icon\u0026#39;); el[0].appendChild(a); a.appendChild(b); window.clearInterval(timer); } }, 3); } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .pace .spinner { position: fixed; top: 15px; right: 15px; z-index: 2000; display: block; } .pace .spinner-icon { width: 18px; height: 18px; -webkit-box-sizing: border-box; box-sizing: border-box; border: solid 2px transparent; border-top-color: #2299dd; border-left-color: #2299dd; border-radius: 50%; -webkit-animation: nprogress-spinner .4s linear infinite; animation: nprogress-spinner .4s linear infinite; } @-webkit-keyframes nprogress-spinner { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes nprogress-spinner { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes fadeOut { from { opacity: 1; } to { opacity: 0; } } .pace { -webkit-pointer-events: none; pointer-events: none; -webkit-user-select: none; -moz-user-select: none; user-select: none; -webkit-transition: opacity 0.8s ease-in-out; -moz-transition: opacity 0.8s ease-in-out; -o-transition: opacity 0.8s ease-in-out; transition: opacity 0.8s ease-in-out; } .pace-inactive { opacity:0; filter: alpha(opacity=0); } .pace .pace-progress { background: #2299dd; position: fixed; z-index: 2000; top: 0; right: 100%; width: 100%; height: 3px; box-shadow: 0 0 3px #2299dd; } \u0026lt;/style\u0026gt; 参考资料  JavaScript从零基础入门到精通 http://yun.itheima.com/course/551.html 维基百科 https://zh.wikipedia.org/  ","date":"2019-07-05T00:00:00Z","permalink":"https://visdot.com/warehouse/html/","section":"warehouse","tags":null,"title":"前端基础学习笔记"},{"categories":null,"contents":"在互联网上冲浪时，总能接触到各种单位，虽然很面熟，你真的知道它们所代表的含义吗。\n容量单位 要搞清楚它，首先得搞懂 B 和 b 的区别，其中大写 B 代表字节(byte)，小写 b 代表比特(bit)，1 字节等于 8 比特，即 1B=8b。\n其次还需搞懂 k 与 Ki 的区别，小写 k 表示千 (1000)、Ki 则表示二进制当中的千 (1024)。\n 提示\n实际使用过程中，一些场景明明是二进制转换却没用 Ki 表示，使人在阅读时产生混淆，故具体转换关系为 1000 还是 1024 需要视实际情况而定。\n    单位 中文名 换算关系     b 比特 0.125B = 1b   Kb 千比特 1000b = 1Kb   Mb 兆比特 1000Kb = 1Mb   Gb 吉比特 1000Mb = 1Gb   Tb 太比特 1000Gb = 1Tb   B 字节 8b = 1B   KB 千字节 1000B = 1KB   MB 兆字节 1000KB = 1Mb   GB 吉字节 1000Mb = 1Gb   TB 太字节 1000Gb = 1TB   Kib 二进制千比特 1024 b = 1Kib   Mib 二进制兆比特 1024 Kib = 1Mib   Gib 二进制吉比特 1024 Mib = 1Gib   Tib 二进制太比特 1024 Gib = 1Tib   KiB 二进制千字节 1024 B = 1KiB   MiB 二进制兆字节 1024 KiB = 1Mib   GiB 二进制吉字节 1024 Mib = 1Gib   TiB 二进制太字节 1024 Gib = 1TiB    码率单位  码率（数据传输速率）指在一个数据传送系统中，单位时间内通过设备比特、字符、块等的平均量。通常使用 B/s 或 b/s 两种复合式单位 摘自维基百科。\n 码率单位最常出现在传输速度上，比如网速、硬盘拷贝速度等。\n   单位 中文名 换算关系     b/s 比特每秒 0.125B/s = 1b/s   Kb/s Kbps 千比特每秒 1000b/s = 1Kb/s   Mb/s Mbps 兆比特每秒 1000Kb/s = 1Mb/s   Gb/s Gbps 吉比特每秒 1000Mb/s = 1Gb/s   Tb/s Tbps 太比特每秒 1000Gb/s = 1Tb/s   B/s 字节每秒 8b/s = 1B/s   KB/s 千字节每秒 1000B/s = 1KB/s   MB/s 兆字节每秒 1000KB/s = 1Mb/s   GB/s 吉字节每秒 1000Mb/s = 1Gb/s   TB/s 太字节每秒 1000Gb/s = 1TB/s   Kib/s Kibps 二进制千比特每秒 1024 b/s = 1 Kib/s   Mib/s Mibps 二进制兆比特每秒 1024 Kib/s = 1 Mib/s   Gib/s Gibps 二进制吉比特每秒 1024 Mib/s = 1 Gib/s   Tib/s Tibps 二进制太比特每秒 1024 Gib/s = 1 Tib/s   KiB/s 二进制千字节每秒 1024 B/s = 1 KiB/s   MiB/s 二进制兆字节每秒 1024 KiB/s = 1 Mib/s   GiB/s 二进制吉字节每秒 1024 Mib/s = 1 Gib/s   TiB/s 二进制太字节每秒 1024 Gib/s = 1 TiB/s    单位转换工具   \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;bit (b):\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Byte(B):\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;kilobit (kb):\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Kilobyte (KB):\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;megabit (mb):\u0026nbsp;\u0026nbsp;Megabyte (MB):\u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; bps:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; B/s:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; kbps: \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; KB/s: \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mbps:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; MB/s:\u0026nbsp; var sizenum = 12; kps = new Array(sizenum); kps[1] = \"1.6\"; kps[2] = \"3.2\"; kps[3] = \"3.8\"; kps[4] = \"7.168\"; kps[5] = \"8.192\"; kps[6] = \"16.384\"; kps[7] = \"80.00\"; kps[8] = \"192.\"; kps[9] = \"5592.\"; kps[10] = \"19440.\"; kps[11] = \"58320.\"; kps[12] = \"77760.\"; function calc(factor) { if ((document.grid.size.value == null) || (document.grid.size.length == 0)) { document.grid.size.value = \"\"; alert(\"Please enter a file size\"); }; var filesize = parseFloat(document.grid.size.value); for (x = 1; x ","date":"2020-02-24T00:00:00Z","permalink":"https://visdot.com/warehouse/speed_unit/","section":"warehouse","tags":null,"title":"充斥互联网的各种单位"},{"categories":null,"contents":"谈一谈我在网页设计过程中的一些经验与小技巧。分享在网页排版、设计的过程中经常遇到的问题的一些解决办法。推荐在掌握了前端基础后阅读。\n字体 通用的字体家族 在网页设计中使用系统默认的界面字体能保证用户观感的统一性，同时也一定程度上提升了页面的加载速度，使得页面在不同平台都获得较好的观感和可读性。下面列出的 font-family 仅供参考，需与时俱进更新字体列表及排列顺序。\nbody { font-family: -apple-system, BlinkMacSystemFont, \u0026#39;Segoe UI\u0026#39;, \u0026#39;PingFang SC\u0026#39;, \u0026#39;Hiragino Sans GB\u0026#39;, \u0026#39;Microsoft YaHei\u0026#39;, \u0026#39;Helvetica Neue\u0026#39;, Helvetica, Arial, sans-serif, \u0026#39;Apple Color Emoji\u0026#39;, \u0026#39;Segoe UI Emoji\u0026#39;, \u0026#39;Segoe UI Symbol\u0026#39;; }  等宽数字 在一些展示大量数字的页面中，非等宽的数字表示会使列表宽度不一导致排版混乱，同时也不利于数字比较，使用 font-variant-numeric 属性将数字等宽表示。\nbody { font-variant-numeric: tabular-nums; }  字体的尺寸 字体的尺寸中的各项参数应符合一定规律，行高一般控制在字号的 1.5 至 1.8 倍之间。在同一页面中应避免出现5种以上的字体尺寸，推荐使用简约风格。\n   尺寸 12 14 16 20 24 30 38 46 ……     行高 22 24 26 28 32 38 46 54 ……    表中数据仅供参考，应根据实际情况制定。 色彩 在颜色运用上要尽可能的克制，减少色彩使用的种类。首先选择主色，然后选择小于四种的辅助色，运用好颜色的饱和度突出要表达的主体，每种辅助色最好有固定的应用场景，使整个产品体系的色彩体系化，提高用户的视觉效率，避免出现“五彩缤纷”的状态。色彩选择上尽量选择 Web 标准颜色。\n选取颜色的饱和度不应过高，字体颜色参考 WCAG 的标准，将文本和背景色之间保持在了 7:1 以上的 AAA 级对比度，不然会让用户很容易产生视觉疲劳。\n样式表 全局默认样式 *, ::after, ::before { box-sizing: border-box; } body { text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } 去除浏览器默认样式 大多数情况浏览器的默认样式会妨碍我们网页的外观设计，不利于各设备间的视觉统一。故在添加自定义样式之前可以先去除这些浏览器自带的默认样式。\n输入框标签 input\ninput { background: none; outline: none; border: none; } 按钮标签 button\nbutton { margin: 0; padding: 0; border: none; outline: none; } 列表标签 li\nul,li { padding:0; margin:0; list-style:none; } 代码规范 代码在满足页面需求的同时，为了页面持续高效运行与后期维护，最好拥有统一规范的代码书写规则。下面提到的一些是行业惯例，一些事个人习惯，请根据实际情况灵活设置。你可使用 Unicorn 工具来验证自己的页面是否符合 W3C规范。\n相关站点：W3C 官网、 W3C 中国、 W3C 统一验证工具 Unicorn\n代码结构 在 HTML 页面代码结构中，通常 CSS 文件在前，JavaScript 代码则放在页面底部，因为加载 JavaScript 代码会影响页面的整体加载速度。\n在 \u0026lt;script\u0026gt; 标签中可根据需要使用 async 和 defer 属性，defer 设置为 true,则意味着此 JavaScript 文件滞后执行,不影响页面 HTML 的渲染，async 是 Html5 中新引入的属性，已经得到了大多数现代浏览器的支持，此属性设置为 true 意味着文件异步加载和执行。两个属性的区别是 async 下载完成后就会执行，而 efer 则会还是按照在页面的的次序来执行，所以下载和执行不一定会连续。\n应最大限度精简代码，比如删除多余的 \u0026lt;div\u0026gt; 标签，这样做能有效提升页面加载速度。\n 命名规则 属性和标签名通常使用W3c的规范建议，采用小写字母表示，属性值用双引号包括。重要元素同时给定 id 和 class 标签，其中 id 名称各词之间使用 _ 连接，class 名称各词之间使用 - 连接。\n标签以及属性名推荐采用英文命名，下表列出了一些常用到的。\n   标签类型 通用命名     功能 login(登陆) loginbar(登录条) logo(标志) banner(广告) hot(热点) news(新闻) download (下载) subnav(子导航) search(搜索) friendlink(友情链接) list(文章列表) tab(标签页) msg(提示信息) joinus(加入) tips(小技巧) guild(指南) copyright(版权) service(服务) regsiter(注册) status(状态) vote(投票) partner(合作伙伴) scroll(滚动) shop(功能区) btn(按钮) current(当前的) icon(图标) note(注释) link(链接)   结构 container(容器) header(页头) nav(导航) content(内容) main(页面主体) footer(页尾) sidebar(侧栏) column(栏目) wrapper(页面外围) left(左) center(中) right(右)   导航 nav(导航) mainbav(主导航) subnav(子导航) topnav(顶导航) sidebar(边导航) leftsidebar(左导航) menu(菜单) submenu(子菜单) title(标题) summary(摘要)    使用注释 在各大功能区块给出注释，同样有利于代码的快速检索与后期维护。\n\u0026lt;!- HTML 注释 -\u0026gt; /* CSS 注释 */ 使用单独的样式文件 方便后期维护以及精简代码量，推荐将样式写在单独的 CSS 样式文件中。\n补全某些标签的属性 \u0026lt;img\u0026gt; 标签的 alt 属性是图片不能正常显示时的替换文字； \u0026lt;a\u0026gt; 标签的 title 属性可作为提示信息，当鼠标指向时显示为提示信息。\n","date":"2019-12-04T00:00:00Z","permalink":"https://visdot.com/warehouse/web_design/","section":"warehouse","tags":null,"title":"浅谈网页设计与开发"},{"categories":null,"contents":"在线调用字体，省去本地字体管理。Google Fonts 中所有字体都是免费和开源的，任何项目的任何人都可以免费调用。\n选择字体 首先进入 Google Fonts 官网，然后选择自己需要一个或多个的字体，点击字体左上角加号。\n\u0026lt;link href=\u0026quot;https://fonts.googleapis.com/css?family=Noto+Sans+SC|Roboto\u0026amp;display=swap\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt; 引入字体 点击网页右下角，在弹出框中有两处代码，将第一处代码放置在Html文件的\u0026lt;head\u0026gt;标签中，第二处代码用于CSS文件中定义字体。\nfont-family: 'Roboto', sans-serif; font-family: 'Noto Sans SC', sans-serif; ","date":"2019-10-24T00:00:00Z","permalink":"https://visdot.com/warehouse/google_fonts/","section":"warehouse","tags":null,"title":"使用 Google Fonts 在线字体库"},{"categories":null,"contents":"色彩对设计至关重要，能直接影响项目的第一观感。不同的动物所看到的颜色是不同的，不同的人所感受到的颜色也是不同的，故这其实算是个“玄学问题”，但了解一些色彩的基本原理和 Web 设计规则是很有必要的。\n色彩的表示 颜色名称表示 最直观的表示方法就是用颜色的英文名直接表示，但能表示的颜色数量有限。 格式形如：blue\nRGB 十进制“函数”表示 光学三原色红绿蓝(RGB)，通过调整三种颜色的占比表示，每种颜色从低到高用数字0至256表示。格式形如：rgba(0,0,255,0.5)\nHLS 十进制“函数”表示 通过色相、亮度、饱和度 这三个参数也能表示颜色。格式形如：hls(204,62%,40%)\nHEX 十六进制数字表示 将RGB十进制转换为十六进制代码，以#号开头，后面分别为R G B的16位进制数。格式形如：#0000ff\n维基百科了解更多 https://zh.wikipedia.org\n色彩空间 色彩空间（Color space）是对色彩的组织方式。借助色彩空间和针对物理设备的测试，可以得到色彩的固定模拟和数字表示。色彩空间可以只通过任意挑选一些颜色来定义，也可以是基于严谨的数学定义。\nAdobe RGB （网络上最常用）\nsRGB （标准红绿蓝色彩空间）\nCMYK （常用于彩色印刷）\nLab （常用来描述人眼可见的所有颜色）\nSVG 中的 X11 颜色清单  推荐查色页面    站名 站点描述     aTool在线工具  在线颜色选择器、 RGB颜色查询转换   Color Picker 在线颜色选择器、RGB颜色查询转换   w3schools HTML 颜色选择器    ","date":"2019-08-21T00:00:00Z","permalink":"https://visdot.com/warehouse/colors/","section":"warehouse","tags":null,"title":"色彩基础概念"},{"categories":null,"contents":"Git是一个免费开源的分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有内容。具有廉价的本地分支，方便的暂存区域和多个工作流等功能。\n","date":"2019-07-30T00:00:00Z","permalink":"https://visdot.com/projects/eyecus/","section":"projects","tags":null,"title":"eyecus 品牌"},{"categories":null,"contents":"XXX\n","date":"2019-07-19T00:00:00Z","permalink":"https://visdot.com/projects/p_003/","section":"projects","tags":null,"title":"项目003"},{"categories":null,"contents":"XXX\n","date":"2019-07-17T00:00:00Z","permalink":"https://visdot.com/projects/p_002/","section":"projects","tags":null,"title":"项目002"},{"categories":null,"contents":"Git是一个免费开源的分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有内容。具有廉价的本地分支，方便的暂存区域和多个工作流等功能。\n 相关站点 Git 官网 Git 教程 Git 仓库\n  Git 全局设置 git config --global user.name \u0026quot;XXX\u0026quot; git config --global user.email \u0026quot;XXX@gmail.com\u0026quot;  创建一个新仓库 git clone git@gitlab.com:XXX/XXXX.git cd XXX touch README.md git add README.md git commit -m \u0026quot;add README\u0026quot; git push -u origin master  推送现有文件夹 cd XXXX git init git remote add origin git@github.com:XXX/XXXX.git git add . git commit -m \u0026quot;XXXX\u0026quot; git push -u origin master  推送现有的 Git 仓库 cd XXXX git remote rename origin old-origin git remote add origin git@github.com:XXX/XXXX.git git push -u origin --all git push -u origin --tags ","date":"2019-07-15T00:00:00Z","permalink":"https://visdot.com/warehouse/git/","section":"warehouse","tags":null,"title":"Git 基础语法"},{"categories":null,"contents":"XXX\n","date":"2019-07-15T00:00:00Z","permalink":"https://visdot.com/projects/p_001/","section":"projects","tags":null,"title":"项目001"},{"categories":null,"contents":"使用特殊符号能丰富页面，使用得当能提升表现力和整体观感。为方便使用，本页面所提供特殊符号清单用于快速复制使用。\n绘文字表情（emoji） 绘文字（日语：絵文字/えもじ emoji），在中国大陆，emoji通常叫做“小黄脸”，或者直称emoji。在NTTDoCoMo的i-mode系统电话系统中，绘文字的尺寸是12x12 像素，在传送时，一个图形有2个字节。Unicode编码为E63E到E757，而在Shift-JIS编码则是从F89F到F9FC。基本的绘文字共有176个符号，在C-HTML4.0的编程语言中，则另增添了76个情感符号。\n最早由栗田穰崇（Shigetaka Kurita）创作，并在日本网络及手机用户中流行。自苹果公司发布的iOS 5输入法中加入了emoji后，这种表情符号开始席卷全球，目前emoji已被大多数现代计算机系统所兼容的Unicode编码采纳，普遍应用于各种手机短信和社交网络中。本段摘自百度百科。\n面部表情 Smileys 😀 😁 😂 🤣 😃 😄 😅 😆 😉 😊 😋 😎 😍 😘 🥰 😗 😙 😚 ☺️ 🙂 🤗 🤩 🤔 🤨 😐 😑 😶 🙄 😏 😣 😥 😮 🤐 😯 😪 😫 😴 😌 😛 😜 😝 🤤 😒 😓 😔 😕 🙃 🤑 😲 ☹️ 🙁 😖 😞 😟 😤 😢 😭 😦 😧 😨 😩 🤯 😬 😰 😱 🥵 🥶 😳 🤪 😵 😡 😠 🤬 😷 🤒 🤕 🤢 🤮 🤧 😇 🤠 🤡 🥳 🥴 🥺 🤥 🤫 🤭 🧐 🤓 😈 👿 👹 👺 💀 👻 👽 🤖 💩 😺 😸 😹 😻 😼 😽 🙀 😿 😾\n人物\u0026amp;手势 People and Fantasy 👶 👧 🧒 👦 👩 🧑 👨 👵 🧓 👴 👲 👳‍♀️ 👳‍♂️ 🧕 🧔 👱‍♂️ 👱‍♀️ 👨‍🦰 👩‍🦰 👨‍🦱 👩‍🦱 👨‍🦲 👩‍🦲 👨‍🦳 👩‍🦳 🦸‍♀️ 🦸‍♂️ 🦹‍♀️ 🦹‍♂️ 👮‍♀️ 👮‍♂️ 👷‍♀️ 👷‍♂️ 💂‍♀️ 💂‍♂️ 🕵️‍♀️ 🕵️‍♂️ 👩‍⚕️ 👨‍⚕️ 👩‍🌾 👨‍🌾 👩‍🍳 👨‍🍳 👩‍🎓 👨‍🎓 👩‍🎤 👨‍🎤 👩‍🏫 👨‍🏫 👩‍🏭 👨‍🏭 👩‍💻 👨‍💻 👩‍💼 👨‍💼 👩‍🔧 👨‍🔧 👩‍🔬 👨‍🔬 👩‍🎨 👨‍🎨 👩‍🚒 👨‍🚒 👩‍✈️ 👨‍✈️ 👩‍🚀 👨‍🚀 👩‍⚖️ 👨‍⚖️ 👰 🤵 👸 🤴 🤶 🎅 🧙‍♀️ 🧙‍♂️ 🧝‍♀️ 🧝‍♂️ 🧛‍♀️ 🧛‍♂️ 🧟‍♀️ 🧟‍♂️ 🧞‍♀️ 🧞‍♂️ 🧜‍♀️ 🧜‍♂️ 🧚‍♀️ 🧚‍♂️ 👼 🤰 🤱 🙇‍♀️ 🙇‍♂️ 💁‍♀️ 💁‍♂️ 🙅‍♀️ 🙅‍♂️ 🙆‍♀️ 🙆‍♂️ 🙋‍♀️ 🙋‍♂️ 🤦‍♀️ 🤦‍♂️ 🤷‍♀️ 🤷‍♂️ 🙎‍♀️ 🙎‍♂️ 🙍‍♀️ 🙍‍♂️ 💇‍♀️ 💇‍♂️ 💆‍♀️ 💆‍♂️ 🧖‍♀️ 🧖‍♂️ 💅 🤳 💃 🕺 👯‍♀️ 👯‍♂️ 🕴 🚶‍♀️ 🚶‍♂️ 🏃‍♀️ 🏃‍♂️ 👫 👭 👬 💑 👩‍❤️‍👩 👨‍❤️‍👨 💏 👩‍❤️‍💋‍👩 👨‍❤️‍💋‍👨 👪 👨‍👩‍👧 👨‍👩‍👧‍👦 👨‍👩‍👦‍👦 👨‍👩‍👧‍👧 👩‍👩‍👦 👩‍👩‍👧 👩‍👩‍👧‍👦 👩‍👩‍👦‍👦 👩‍👩‍👧‍👧 👨‍👨‍👦 👨‍👨‍👧 👨‍👨‍👧‍👦 👨‍👨‍👦‍👦 👨‍👨‍👧‍👧 👩‍👦 👩‍👧 👩‍👧‍👦 👩‍👦‍👦 👩‍👧‍👧 👨‍👦 👨‍👧 👨‍👧‍👦 👨‍👦‍👦 👨‍👧‍👧 🤲 👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤟 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🦵 🦶 🖕 ✍️ 🙏 💍 💄 💋 👄 👅 👂 👃 👣 👁 👀 🧠 🦴 🦷 🗣 👤 👥\n 👶🏻 👦🏻 👧🏻 👨🏻 👩🏻 👱🏻‍♀️ 👱🏻 👴🏻 👵🏻 👲🏻 👳🏻‍♀️ 👳🏻 👮🏻‍♀️ 👮🏻 👷🏻‍♀️ 👷🏻 💂🏻‍♀️ 💂🏻 🕵🏻‍♀️ 🕵🏻 👩🏻‍⚕️ 👨🏻‍⚕️ 👩🏻‍🌾 👨🏻‍🌾 👩🏻‍🍳 👨🏻‍🍳 👩🏻‍🎓 👨🏻‍🎓 👩🏻‍🎤 👨🏻‍🎤 👩🏻‍🏫 👨🏻‍🏫 👩🏻‍🏭 👨🏻‍🏭 👩🏻‍💻 👨🏻‍💻 👩🏻‍💼 👨🏻‍💼 👩🏻‍🔧 👨🏻‍🔧 👩🏻‍🔬 👨🏻‍🔬 👩🏻‍🎨 👨🏻‍🎨 👩🏻‍🚒 👨🏻‍🚒 👩🏻‍✈️ 👨🏻‍✈️ 👩🏻‍🚀 👨🏻‍🚀 👩🏻‍⚖️ 👨🏻‍⚖️ 🤶🏻 🎅🏻 👸🏻 🤴🏻 👰🏻 🤵🏻 👼🏻 🤰🏻 🙇🏻‍♀️ 🙇🏻 💁🏻 💁🏻‍♂️ 🙅🏻 🙅🏻‍♂️ 🙆🏻 🙆🏻‍♂️ 🙋🏻 🙋🏻‍♂️ 🤦🏻‍♀️ 🤦🏻‍♂️ 🤷🏻‍♀️ 🤷🏻‍♂️ 🙎🏻 🙎🏻‍♂️ 🙍🏻 🙍🏻‍♂️ 💇🏻 💇🏻‍♂️ 💆🏻 💆🏻‍♂️ 🕴🏻 💃🏻 🕺🏻 🚶🏻‍♀️ 🚶🏻 🏃🏻‍♀️ 🏃🏻 🤲🏻 👐🏻 🙌🏻 👏🏻 🙏🏻 👍🏻 👎🏻 👊🏻 ✊🏻 🤛🏻 🤜🏻 🤞🏻 ✌🏻 🤟🏻 🤘🏻 👌🏻 👈🏻 👉🏻 👆🏻 👇🏻 ☝🏻 ✋🏻 🤚🏻 🖐🏻 🖖🏻 👋🏻 🤙🏻 💪🏻 🖕🏻 ✍🏻 🤳🏻 💅🏻 👂🏻 👃🏻\n 👶🏼 👦🏼 👧🏼 👨🏼 👩🏼 👱🏼‍♀️ 👱🏼 👴🏼 👵🏼 👲🏼 👳🏼‍♀️ 👳🏼 👮🏼‍♀️ 👮🏼 👷🏼‍♀️ 👷🏼 💂🏼‍♀️ 💂🏼 🕵🏼‍♀️ 🕵🏼 👩🏼‍⚕️ 👨🏼‍⚕️ 👩🏼‍🌾 👨🏼‍🌾 👩🏼‍🍳 👨🏼‍🍳 👩🏼‍🎓 👨🏼‍🎓 👩🏼‍🎤 👨🏼‍🎤 👩🏼‍🏫 👨🏼‍🏫 👩🏼‍🏭 👨🏼‍🏭 👩🏼‍💻 👨🏼‍💻 👩🏼‍💼 👨🏼‍💼 👩🏼‍🔧 👨🏼‍🔧 👩🏼‍🔬 👨🏼‍🔬 👩🏼‍🎨 👨🏼‍🎨 👩🏼‍🚒 👨🏼‍🚒 👩🏼‍✈️ 👨🏼‍✈️ 👩🏼‍🚀 👨🏼‍🚀 👩🏼‍⚖️ 👨🏼‍⚖️ 🤶🏼 🎅🏼 👸🏼 🤴🏼 👰🏼 🤵🏼 👼🏼 🤰🏼 🙇🏼‍♀️ 🙇🏼 💁🏼 💁🏼‍♂️ 🙅🏼 🙅🏼‍♂️ 🙆🏼 🙆🏼‍♂️ 🙋🏼 🙋🏼‍♂️ 🤦🏼‍♀️ 🤦🏼‍♂️ 🤷🏼‍♀️ 🤷🏼‍♂️ 🙎🏼 🙎🏼‍♂️ 🙍🏼 🙍🏼‍♂️ 💇🏼 💇🏼‍♂️ 💆🏼 💆🏼‍♂️ 🕴🏼 💃🏼 🕺🏼 🚶🏼‍♀️ 🚶🏼 🏃🏼‍♀️ 🏃🏼 🤲🏼 👐🏼 🙌🏼 👏🏼 🙏🏼 👍🏼 👎🏼 👊🏼 ✊🏼 🤛🏼 🤜🏼 🤞🏼 ✌🏼 🤟🏼 🤘🏼 👌🏼 👈🏼 👉🏼 👆🏼 👇🏼 ☝🏼 ✋🏼 🤚🏼 🖐🏼 🖖🏼 👋🏼 🤙🏼 💪🏼 🖕🏼 ✍🏼 🤳🏼 💅🏼 👂🏼 👃🏼\n 👶🏽 👦🏽 👧🏽 👨🏽 👩🏽 👱🏽‍♀️ 👱🏽 👴🏽 👵🏽 👲🏽 👳🏽‍♀️ 👳🏽 👮🏽‍♀️ 👮🏽 👷🏽‍♀️ 👷🏽 💂🏽‍♀️ 💂🏽 🕵🏽‍♀️ 🕵🏽 👩🏽‍⚕️ 👨🏽‍⚕️ 👩🏽‍🌾 👨🏽‍🌾 👩🏽‍🍳 👨🏽‍🍳 👩🏽‍🎓 👨🏽‍🎓 👩🏽‍🎤 👨🏽‍🎤 👩🏽‍🏫 👨🏽‍🏫 👩🏽‍🏭 👨🏽‍🏭 👩🏽‍💻 👨🏽‍💻 👩🏽‍💼 👨🏽‍💼 👩🏽‍🔧 👨🏽‍🔧 👩🏽‍🔬 👨🏽‍🔬 👩🏽‍🎨 👨🏽‍🎨 👩🏽‍🚒 👨🏽‍🚒 👩🏽‍✈️ 👨🏽‍✈️ 👩🏽‍🚀 👨🏽‍🚀 👩🏽‍⚖️ 👨🏽‍⚖️ 🤶🏽 🎅🏽 👸🏽 🤴🏽 👰🏽 🤵🏽 👼🏽 🤰🏽 🙇🏽‍♀️ 🙇🏽 💁🏽 💁🏽‍♂️ 🙅🏽 🙅🏽‍♂️ 🙆🏽 🙆🏽‍♂️ 🙋🏽 🙋🏽‍♂️ 🤦🏽‍♀️ 🤦🏽‍♂️ 🤷🏽‍♀️ 🤷🏽‍♂️ 🙎🏽 🙎🏽‍♂️ 🙍🏽 🙍🏽‍♂️ 💇🏽 💇🏽‍♂️ 💆🏽 💆🏽‍♂️ 🕴🏼 💃🏽 🕺🏽 🚶🏽‍♀️ 🚶🏽 🏃🏽‍♀️ 🏃🏽 🤲🏽 👐🏽 🙌🏽 👏🏽 🙏🏽 👍🏽 👎🏽 👊🏽 ✊🏽 🤛🏽 🤜🏽 🤞🏽 ✌🏽 🤟🏽 🤘🏽 👌🏽 👈🏽 👉🏽 👆🏽 👇🏽 ☝🏽 ✋🏽 🤚🏽 🖐🏽 🖖🏽 👋🏽 🤙🏽 💪🏽 🖕🏽 ✍🏽 🤳🏽 💅🏽 👂🏽 👃🏽\n 👶🏾 👦🏾 👧🏾 👨🏾 👩🏾 👱🏾‍♀️ 👱🏾 👴🏾 👵🏾 👲🏾 👳🏾‍♀️ 👳🏾 👮🏾‍♀️ 👮🏾 👷🏾‍♀️ 👷🏾 💂🏾‍♀️ 💂🏾 🕵🏾‍♀️ 🕵🏾 👩🏾‍⚕️ 👨🏾‍⚕️ 👩🏾‍🌾 👨🏾‍🌾 👩🏾‍🍳 👨🏾‍🍳 👩🏾‍🎓 👨🏾‍🎓 👩🏾‍🎤 👨🏾‍🎤 👩🏾‍🏫 👨🏾‍🏫 👩🏾‍🏭 👨🏾‍🏭 👩🏾‍💻 👨🏾‍💻 👩🏾‍💼 👨🏾‍💼 👩🏾‍🔧 👨🏾‍🔧 👩🏾‍🔬 👨🏾‍🔬 👩🏾‍🎨 👨🏾‍🎨 👩🏾‍🚒 👨🏾‍🚒 👩🏾‍✈️ 👨🏾‍✈️ 👩🏾‍🚀 👨🏾‍🚀 👩🏾‍⚖️ 👨🏾‍⚖️ 🤶🏾 🎅🏾 👸🏾 🤴🏾 👰🏾 🤵🏾 👼🏾 🤰🏾 🙇🏾‍♀️ 🙇🏾 💁🏾 💁🏾‍♂️ 🙅🏾 🙅🏾‍♂️ 🙆🏾 🙆🏾‍♂️ 🙋🏾 🙋🏾‍♂️ 🤦🏾‍♀️ 🤦🏾‍♂️ 🤷🏾‍♀️ 🤷🏾‍♂️ 🙎🏾 🙎🏾‍♂️ 🙍🏾 🙍🏾‍♂️ 💇🏾 💇🏾‍♂️ 💆🏾 💆🏾‍♂️ 🕴🏾 💃🏾 🕺🏾 🚶🏾‍♀️ 🚶🏾 🏃🏾‍♀️ 🏃🏾 🤲🏾 👐🏾 🙌🏾 👏🏾 🙏🏾 👍🏾 👎🏾 👊🏾 ✊🏾 🤛🏾 🤜🏾 🤞🏾 ✌🏾 🤟🏾 🤘🏾 👌🏾 👈🏾 👉🏾 👆🏾 👇🏾 ☝🏾 ✋🏾 🤚🏾 🖐🏾 🖖🏾 👋🏾 🤙🏾 💪🏾 🖕🏾 ✍🏾 🤳🏾 💅🏾 👂🏾 👃🏾\n 👶🏿 👦🏿 👧🏿 👨🏿 👩🏿 👱🏿‍♀️ 👱🏿 👴🏿 👵🏿 👲🏿 👳🏿‍♀️ 👳🏿 👮🏿‍♀️ 👮🏿 👷🏿‍♀️ 👷🏿 💂🏿‍♀️ 💂🏿 🕵🏿‍♀️ 🕵🏿 👩🏿‍⚕️ 👨🏿‍⚕️ 👩🏿‍🌾 👨🏿‍🌾 👩🏿‍🍳 👨🏿‍🍳 👩🏿‍🎓 👨🏿‍🎓 👩🏿‍🎤 👨🏿‍🎤 👩🏿‍🏫 👨🏿‍🏫 👩🏿‍🏭 👨🏿‍🏭 👩🏿‍💻 👨🏿‍💻 👩🏿‍💼 👨🏿‍💼 👩🏿‍🔧 👨🏿‍🔧 👩🏿‍🔬 👨🏿‍🔬 👩🏿‍🎨 👨🏿‍🎨 👩🏿‍🚒 👨🏿‍🚒 👩🏿‍✈️ 👨🏿‍✈️ 👩🏿‍🚀 👨🏿‍🚀 👩🏿‍⚖️ 👨🏿‍⚖️ 🤶🏿 🎅🏿 👸🏿 🤴🏿 👰🏿 🤵🏿 👼🏿 🤰🏿 🙇🏿‍♀️ 🙇🏿 💁🏿 💁🏿‍♂️ 🙅🏿 🙅🏿‍♂️ 🙆🏿 🙆🏿‍♂️ 🙋🏿 🙋🏿‍♂️ 🤦🏿‍♀️ 🤦🏿‍♂️ 🤷🏿‍♀️ 🤷🏿‍♂️ 🙎🏿 🙎🏿‍♂️ 🙍🏿 🙍🏿‍♂️ 💇🏿 💇🏿‍♂️ 💆🏿 💆🏿‍♂️ 🕴🏿 💃🏿 🕺🏿 🚶🏿‍♀️ 🚶🏿 🏃🏿‍♀️ 🏃🏿 🤲🏿 👐🏿 🙌🏿 👏🏿 🙏🏿 👍🏿 👎🏿 👊🏿 ✊🏿 🤛🏿 🤜🏿 🤞🏿 ✌🏿 🤟🏿 🤘🏿 👌🏿 👈🏿 👉🏿 👆🏿 👇🏿 ☝🏿 ✋🏿 🤚🏿 🖐🏿 🖖🏿 👋🏿 🤙🏿 💪🏿 🖕🏿 ✍🏿 🤳🏿 💅🏿 👂🏿 👃🏿\n衣物\u0026amp;配饰 Clothing and Accessories 🧥 👚 👕 👖 👔 👗 👙 👘 👠 👡 👢 👞 👟 🥾 🥿 🧦 🧤 🧣 🎩 🧢 👒 🎓 ⛑ 👑 👝 👛 👜 💼 🎒 👓 🕶 🥽 🥼 🌂 🧵 🧶\n动物\u0026amp;自然 Animals \u0026amp; Nature 🐶 🐱 🐭 🐹 🐰 🦊 🦝 🐻 🐼 🦘 🦡 🐨 🐯 🦁 🐮 🐷 🐽 🐸 🐵 🙈 🙉 🙊 🐒 🐔 🐧 🐦 🐤 🐣 🐥 🦆 🦢 🦅 🦉 🦚 🦜 🦇 🐺 🐗 🐴 🦄 🐝 🐛 🦋 🐌 🐚 🐞 🐜 🦗 🕷 🕸 🦂 🦟 🦠 🐢 🐍 🦎 🦖 🦕 🐙 🦑 🦐 🦀 🐡 🐠 🐟 🐬 🐳 🐋 🦈 🐊 🐅 🐆 🦓 🦍 🐘 🦏 🦛 🐪 🐫 🦙 🦒 🐃 🐂 🐄 🐎 🐖 🐏 🐑 🐐 🦌 🐕 🐩 🐈 🐓 🦃 🕊 🐇 🐁 🐀 🐿 🦔 🐾 🐉 🐲 🌵 🎄 🌲 🌳 🌴 🌱 🌿 ☘️ 🍀 🎍 🎋 🍃 🍂 🍁 🍄 🌾 💐 🌷 🌹 🥀 🌺 🌸 🌼 🌻 🌞 🌝 🌛 🌜 🌚 🌕 🌖 🌗 🌘 🌑 🌒 🌓 🌔 🌙 🌎 🌍 🌏 💫 ⭐️ 🌟 ✨ ⚡️ ☄️ 💥 🔥 🌪 🌈 ☀️ 🌤 ⛅️ 🌥 ☁️ 🌦 🌧 ⛈ 🌩 🌨 ❄️ ☃️ ⛄️ 🌬 💨 💧 💦 ☔️ ☂️ 🌊 🌫\n食物\u0026amp;饮料 Food \u0026amp; Drink 🍏 🍎 🍐 🍊 🍋 🍌 🍉 🍇 🍓 🍈 🍒 🍑 🍍 🥭 🥥 🥝 🍅 🍆 🥑 🥦 🥒 🥬 🌶 🌽 🥕 🥔 🍠 🥐 🍞 🥖 🥨 🥯 🧀 🥚 🍳 🥞 🥓 🥩 🍗 🍖 🌭 🍔 🍟 🍕 🥪 🥙 🌮 🌯 🥗 🥘 🥫 🍝 🍜 🍲 🍛 🍣 🍱 🥟 🍤 🍙 🍚 🍘 🍥 🥮 🥠 🍢 🍡 🍧 🍨 🍦 🥧 🍰 🎂 🍮 🍭 🍬 🍫 🍿 🧂 🍩 🍪 🌰 🥜 🍯 🥛 🍼 ☕️ 🍵 🥤 🍶 🍺 🍻 🥂 🍷 🥃 🍸 🍹 🍾 🥄 🍴 🍽 🥣 🥡 🥢\n活动\u0026amp;运动 Activity and Sports ⚽️ 🏀 🏈 ⚾️ 🥎 🏐 🏉 🎾 🥏 🎱 🏓 🏸 🥅 🏒 🏑 🥍 🏏 ⛳️ 🏹 🎣 🥊 🥋 🎽 ⛸ 🥌 🛷 🛹 🎿 ⛷ 🏂 🏋️‍♀️ 🏋🏻‍♀️ 🏋🏼‍♀️ 🏋🏽‍♀️ 🏋🏾‍♀️ 🏋🏿‍♀️ 🏋️‍♂️ 🏋🏻‍♂️ 🏋🏼‍♂️ 🏋🏽‍♂️ 🏋🏾‍♂️ 🏋🏿‍♂️ 🤼‍♀️ 🤼‍♂️ 🤸‍♀️ 🤸🏻‍♀️ 🤸🏼‍♀️ 🤸🏽‍♀️ 🤸🏾‍♀️ 🤸🏿‍♀️ 🤸‍♂️ 🤸🏻‍♂️ 🤸🏼‍♂️ 🤸🏽‍♂️ 🤸🏾‍♂️ 🤸🏿‍♂️ ⛹️‍♀️ ⛹🏻‍♀️ ⛹🏼‍♀️ ⛹🏽‍♀️ ⛹🏾‍♀️ ⛹🏿‍♀️ ⛹️‍♂️ ⛹🏻‍♂️ ⛹🏼‍♂️ ⛹🏽‍♂️ ⛹🏾‍♂️ ⛹🏿‍♂️ 🤺 🤾‍♀️ 🤾🏻‍♀️ 🤾🏼‍♀️ 🤾🏾‍♀️ 🤾🏾‍♀️ 🤾🏿‍♀️ 🤾‍♂️ 🤾🏻‍♂️ 🤾🏼‍♂️ 🤾🏽‍♂️ 🤾🏾‍♂️ 🤾🏿‍♂️ 🏌️‍♀️ 🏌🏻‍♀️ 🏌🏼‍♀️ 🏌🏽‍♀️ 🏌🏾‍♀️ 🏌🏿‍♀️ 🏌️‍♂️ 🏌🏻‍♂️ 🏌🏼‍♂️ 🏌🏽‍♂️ 🏌🏾‍♂️ 🏌🏿‍♂️ 🏇 🏇🏻 🏇🏼 🏇🏽 🏇🏾 🏇🏿 🧘‍♀️ 🧘🏻‍♀️ 🧘🏼‍♀️ 🧘🏽‍♀️ 🧘🏾‍♀️ 🧘🏿‍♀️ 🧘‍♂️ 🧘🏻‍♂️ 🧘🏼‍♂️ 🧘🏽‍♂️ 🧘🏾‍♂️ 🧘🏿‍♂️ 🏄‍♀️ 🏄🏻‍♀️ 🏄🏼‍♀️ 🏄🏽‍♀️ 🏄🏾‍♀️ 🏄🏿‍♀️ 🏄‍♂️ 🏄🏻‍♂️ 🏄🏼‍♂️ 🏄🏽‍♂️ 🏄🏾‍♂️ 🏄🏿‍♂️ 🏊‍♀️ 🏊🏻‍♀️ 🏊🏼‍♀️ 🏊🏽‍♀️ 🏊🏾‍♀️ 🏊🏿‍♀️ 🏊‍♂️ 🏊🏻‍♂️ 🏊🏼‍♂️ 🏊🏽‍♂️ 🏊🏾‍♂️ 🏊🏿‍♂️ 🤽‍♀️ 🤽🏻‍♀️ 🤽🏼‍♀️ 🤽🏽‍♀️ 🤽🏾‍♀️ 🤽🏿‍♀️ 🤽‍♂️ 🤽🏻‍♂️ 🤽🏼‍♂️ 🤽🏽‍♂️ 🤽🏾‍♂️ 🤽🏿‍♂️ 🚣‍♀️ 🚣🏻‍♀️ 🚣🏼‍♀️ 🚣🏽‍♀️ 🚣🏾‍♀️ 🚣🏿‍♀️ 🚣‍♂️ 🚣🏻‍♂️ 🚣🏼‍♂️ 🚣🏽‍♂️ 🚣🏾‍♂️ 🚣🏿‍♂️ 🧗‍♀️ 🧗🏻‍♀️ 🧗🏼‍♀️ 🧗🏽‍♀️ 🧗🏾‍♀️ 🧗🏿‍♀️ 🧗‍♂️ 🧗🏻‍♂️ 🧗🏼‍♂️ 🧗🏽‍♂️ 🧗🏾‍♂️ 🧗🏿‍♂️ 🚵‍♀️ 🚵🏻‍♀️ 🚵🏼‍♀️ 🚵🏽‍♀️ 🚵🏾‍♀️ 🚵🏿‍♀️ 🚵‍♂️ 🚵🏻‍♂️ 🚵🏼‍♂️ 🚵🏽‍♂️ 🚵🏾‍♂️ 🚵🏿‍♂️ 🚴‍♀️ 🚴🏻‍♀️ 🚴🏼‍♀️ 🚴🏽‍♀️ 🚴🏾‍♀️ 🚴🏿‍♀️ 🚴‍♂️ 🚴🏻‍♂️ 🚴🏼‍♂️ 🚴🏽‍♂️ 🚴🏾‍♂️ 🚴🏿‍♂️ 🏆 🥇 🥈 🥉 🏅 🎖 🏵 🎗 🎫 🎟 🎪 🤹‍♀️ 🤹🏻‍♀️ 🤹🏼‍♀️ 🤹🏽‍♀️ 🤹🏾‍♀️ 🤹🏿‍♀️ 🤹‍♂️ 🤹🏻‍♂️ 🤹🏼‍♂️ 🤹🏽‍♂️ 🤹🏾‍♂️ 🤹🏿‍♂️ 🎭 🎨 🎬 🎤 🎧 🎼 🎹 🥁 🎷 🎺 🎸 🎻 🎲 🧩 ♟ 🎯 🎳 🎮 🎰\n旅行\u0026amp;地点 Travel \u0026amp; Places 🚗 🚕 🚙 🚌 🚎 🏎 🚓 🚑 🚒 🚐 🚚 🚛 🚜 🛴 🚲 🛵 🏍 🚨 🚔 🚍 🚘 🚖 🚡 🚠 🚟 🚃 🚋 🚞 🚝 🚄 🚅 🚈 🚂 🚆 🚇 🚊 🚉 ✈️ 🛫 🛬 🛩 💺 🛰 🚀 🛸 🚁 🛶 ⛵️ 🚤 🛥 🛳 ⛴ 🚢 ⚓️ ⛽️ 🚧 🚦 🚥 🚏 🗺 🗿 🗽 🗼 🏰 🏯 🏟 🎡 🎢 🎠 ⛲️ ⛱ 🏖 🏝 🏜 🌋 ⛰ 🏔 🗻 🏕 ⛺️ 🏠 🏡 🏘 🏚 🏗 🏭 🏢 🏬 🏣 🏤 🏥 🏦 🏨 🏪 🏫 🏩 💒 🏛 ⛪️ 🕌 🕍 🕋 ⛩ 🛤 🛣 🗾 🎑 🏞 🌅 🌄 🌠 🎇 🎆 🌇 🌆 🏙 🌃 🌌 🌉 🌁\n办公物品 Objects ⌚️ 📱 📲 💻 ⌨️ 🖥 🖨 🖱 🖲 🕹 🗜 💽 💾 💿 📀 📼 📷 📸 📹 🎥 📽 🎞 📞 ☎️ 📟 📠 📺 📻 🎙 🎚 🎛 ⏱ ⏲ ⏰ 🕰 ⌛️ ⏳ 📡 🔋 🔌 💡 🔦 🕯 🗑 🛢 💸 💵 💴 💶 💷 💰 💳 🧾 💎 ⚖️ 🔧 🔨 ⚒ 🛠 ⛏ 🔩 ⚙️ ⛓ 🔫 💣 🔪 🗡 ⚔️ 🛡 🚬 ⚰️ ⚱️ 🏺 🧭 🧱 🔮 🧿 🧸 📿 💈 ⚗️ 🔭 🧰 🧲 🧪 🧫 🧬 🧯 🔬 🕳 💊 💉 🌡 🚽 🚰 🚿 🛁 🛀 🛀🏻 🛀🏼 🛀🏽 🛀🏾 🛀🏿 🧴 🧵 🧶 🧷 🧹 🧺 🧻 🧼 🧽 🛎 🔑 🗝 🚪 🛋 🛏 🛌 🖼 🛍 🧳 🛒 🎁 🎈 🎏 🎀 🎊 🎉 🧨 🎎 🏮 🎐 🧧 ✉️ 📩 📨 📧 💌 📥 📤 📦 🏷 📪 📫 📬 📭 📮 📯 📜 📃 📄 📑 📊 📈 📉 🗒 🗓 📆 📅 📇 🗃 🗳 🗄 📋 📁 📂 🗂 🗞 📰 📓 📔 📒 📕 📗 📘 📙 📚 📖 🔖 🔗 📎 🖇 📐 📏 📌 📍 ✂️ 🖊 🖋 ✒️ 🖌 🖍 📝 ✏️ 🔍 🔎 🔏 🔐 🔒 🔓\n符号 Symbols ❤️ 🧡 💛 💚 💙 💜 🖤 💔 ❣️ 💕 💞 💓 💗 💖 💘 💝 💟 ☮️ ✝️ ☪️ 🕉 ☸️ ✡️ 🔯 🕎 ☯️ ☦️ 🛐 ⛎ ♈️ ♉️ ♊️ ♋️ ♌️ ♍️ ♎️ ♏️ ♐️ ♑️ ♒️ ♓️ 🆔 ⚛️ 🉑 ☢️ ☣️ 📴 📳 🈶 🈚️ 🈸 🈺 🈷️ ✴️ 🆚 💮 🉐 ㊙️ ㊗️ 🈴 🈵 🈹 🈲 🅰️ 🅱️ 🆎 🆑 🅾️ 🆘 ❌ ⭕️ 🛑 ⛔️ 📛 🚫 💯 💢 ♨️ 🚷 🚯 🚳 🚱 🔞 📵 🚭 ❗️ ❕ ❓ ❔ ‼️ ⁉️ 🔅 🔆 〽️ ⚠️ 🚸 🔱 ⚜️ 🔰 ♻️ ✅ 🈯️ 💹 ❇️ ✳️ ❎ 🌐 💠 Ⓜ️ 🌀 💤 🏧 🚾 ♿️ 🅿️ 🈳 🈂️ 🛂 🛃 🛄 🛅 🚹 🚺 🚼 🚻 🚮 🎦 📶 🈁 🔣 ℹ️ 🔤 🔡 🔠 🆖 🆗 🆙 🆒 🆕 🆓 0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 #️⃣ *️⃣ ⏏️ ▶️ ⏸ ⏯ ⏹ ⏺ ⏭ ⏮ ⏩ ⏪ ⏫ ⏬ ◀️ 🔼 🔽 ➡️ ⬅️ ⬆️ ⬇️ ↗️ ↘️ ↙️ ↖️ ↕️ ↔️ ↪️ ↩️ ⤴️ ⤵️ 🔀 🔁 🔂 🔄 🔃 🎵 🎶 ➕ ➖ ➗ ✖️ ♾ 💲 💱 ™️ ©️ ®️ 〰️ ➰ ➿ 🔚 🔙 🔛 🔝 🔜 ✔️ ☑️ 🔘 ⚪️ ⚫️ 🔴 🔵 🔺 🔻 🔸 🔹 🔶 🔷 🔳 🔲 ▪️ ▫️ ◾️ ◽️ ◼️ ◻️ ⬛️ ⬜️ 🔈 🔇 🔉 🔊 🔔 🔕 📣 📢 👁‍🗨 💬 💭 🗯 ♠️ ♣️ ♥️ ♦️ 🃏 🎴 🀄️ 🕐 🕑 🕒 🕓 🕔 🕕 🕖 🕗 🕘 🕙 🕚 🕛 🕜 🕝 🕞 🕟 🕠 🕡 🕢 🕣 🕤 🕥 🕦 🕧\n旗帜 Flags 🏳️ 🏴 🏁 🚩 🏳️‍🌈 🏴‍☠️ 🇦🇫 🇦🇽 🇦🇱 🇩🇿 🇦🇸 🇦🇩 🇦🇴 🇦🇮 🇦🇶 🇦🇬 🇦🇷 🇦🇲 🇦🇼 🇦🇺 🇦🇹 🇦🇿 🇧🇸 🇧🇭 🇧🇩 🇧🇧 🇧🇾 🇧🇪 🇧🇿 🇧🇯 🇧🇲 🇧🇹 🇧🇴 🇧🇦 🇧🇼 🇧🇷 🇮🇴 🇻🇬 🇧🇳 🇧🇬 🇧🇫 🇧🇮 🇰🇭 🇨🇲 🇨🇦 🇮🇨 🇨🇻 🇧🇶 🇰🇾 🇨🇫 🇹🇩 🇨🇱 🇨🇳 🇨🇽 🇨🇨 🇨🇴 🇰🇲 🇨🇬 🇨🇩 🇨🇰 🇨🇷 🇨🇮 🇭🇷 🇨🇺 🇨🇼 🇨🇾 🇨🇿 🇩🇰 🇩🇯 🇩🇲 🇩🇴 🇪🇨 🇪🇬 🇸🇻 🇬🇶 🇪🇷 🇪🇪 🇪🇹 🇪🇺 🇫🇰 🇫🇴 🇫🇯 🇫🇮 🇫🇷 🇬🇫 🇵🇫 🇹🇫 🇬🇦 🇬🇲 🇬🇪 🇩🇪 🇬🇭 🇬🇮 🇬🇷 🇬🇱 🇬🇩 🇬🇵 🇬🇺 🇬🇹 🇬🇬 🇬🇳 🇬🇼 🇬🇾 🇭🇹 🇭🇳 🇭🇰 🇭🇺 🇮🇸 🇮🇳 🇮🇩 🇮🇷 🇮🇶 🇮🇪 🇮🇲 🇮🇱 🇮🇹 🇯🇲 🇯🇵 🎌 🇯🇪 🇯🇴 🇰🇿 🇰🇪 🇰🇮 🇽🇰 🇰🇼 🇰🇬 🇱🇦 🇱🇻 🇱🇧 🇱🇸 🇱🇷 🇱🇾 🇱🇮 🇱🇹 🇱🇺 🇲🇴 🇲🇰 🇲🇬 🇲🇼 🇲🇾 🇲🇻 🇲🇱 🇲🇹 🇲🇭 🇲🇶 🇲🇷 🇲🇺 🇾🇹 🇲🇽 🇫🇲 🇲🇩 🇲🇨 🇲🇳 🇲🇪 🇲🇸 🇲🇦 🇲🇿 🇲🇲 🇳🇦 🇳🇷 🇳🇵 🇳🇱 🇳🇨 🇳🇿 🇳🇮 🇳🇪 🇳🇬 🇳🇺 🇳🇫 🇰🇵 🇲🇵 🇳🇴 🇴🇲 🇵🇰 🇵🇼 🇵🇸 🇵🇦 🇵🇬 🇵🇾 🇵🇪 🇵🇭 🇵🇳 🇵🇱 🇵🇹 🇵🇷 🇶🇦 🇷🇪 🇷🇴 🇷🇺 🇷🇼 🇼🇸 🇸🇲 🇸🇦 🇸🇳 🇷🇸 🇸🇨 🇸🇱 🇸🇬 🇸🇽 🇸🇰 🇸🇮 🇬🇸 🇸🇧 🇸🇴 🇿🇦 🇰🇷 🇸🇸 🇪🇸 🇱🇰 🇧🇱 🇸🇭 🇰🇳 🇱🇨 🇵🇲 🇻🇨 🇸🇩 🇸🇷 🇸🇿 🇸🇪 🇨🇭 🇸🇾 🇹🇼 🇹🇯 🇹🇿 🇹🇭 🇹🇱 🇹🇬 🇹🇰 🇹🇴 🇹🇹 🇹🇳 🇹🇷 🇹🇲 🇹🇨 🇹🇻 🇻🇮 🇺🇬 🇺🇦 🇦🇪 🇬🇧 🏴󠁧󠁢󠁥󠁮󠁧󠁿 🏴󠁧󠁢󠁳󠁣󠁴󠁿 🏴󠁧󠁢󠁷󠁬󠁳󠁿 🇺🇳 🇺🇸 🇺🇾 🇺🇿 🇻🇺 🇻🇦 🇻🇪 🇻🇳 🇼🇫 🇪🇭 🇾🇪 🇿🇲 🇿🇼\n新加入 2019 New Emojis 🥱 🤏 🦾 🦿 🦻 🧏 🧏‍♂️ 🧏‍♀️ 🧍 🧍‍♂️ 🧍‍♀️ 🧎 🧎‍♂️ 🧎‍♀️ 👨‍🦯 👩‍🦯 👨‍🦼 👩‍🦼 👨‍🦽 👩‍🦽 🦧 🦮 🐕‍🦺 🦥 🦦 🦨 🦩 🧄 🧅 🧇 🧆 🧈 🦪 🧃 🧉 🧊 🛕 🦽 🦼 🛺 🪂 🪐 🤿 🪀 🪁 🦺 🥻 🩱 🩲 🩳 🩰 🪕 🪔 🪓 🦯 🩸 🩹 🩺 🪑 🪒 🤎 🤍 🟠 🟡 🟢 🟣 🟤 🟥 🟧 🟨 🟩 🟦 🟪 🟫\n 其他特殊符号（文本） ◤◥◄►▶◀◣◢▲▼◥▸◂▴▾△▽▷◁⊿▻◅▵▿▹◃❏❐❑❒▀▔▕▁▂▃▄▅▆▇▉▊▋█▌▍▎▏▐░▒▓ ■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯✐✎✏✑✒✍✉✁✂✃✄✆✉☎☏☑✓✔√☐☒✗✘ㄨ✕✖✖☢☠☣✈★☆✡囍㍿☯☰☲☱☴☵☶☳☷☜☞☝✍☚☛☟✌♤♧♡♢♠♣♥♦☀☁☂❄☃♨웃유❖☽☾☪✿♂♀✪✯☭➳❤❥웃유♋☮✌☏☢☠✔☑♚▲♪✈✞÷↑↓◆◇⊙■□△▽¿─│♥❣♂♀☿Ⓐ✍✉☣☤✘☒♛▼♫⌘☪≈←→◈◎☉★☆卍卐√×■◆●○◐◑✙☺☻❀⚘♔♕♖♗♘♙♚♛♜♝♞♟♧♡♂♀♠♣♥❤☜☞☎☏⊙◎☺☻☼▧▨♨◐◑↔↕▪▒◊◦▣▤▥▦▩◘◈◇♬♪♩♭♪の★☆→あぃ￡Ю〓§♤♥▶¤✲❈✿✲❈➹☀☂☁【】┱┲❣✚✪✣✤✥✦❉❥❦❧❃❂❁❀✄☪☣☢☠☭ღ▶▷◀◁☀☁☂☃☄★☆☇☈⊙☊☋☌☍ⓛⓞⓥⓔ╬『』∴☀♫♬♩♭♪☆∷﹌の★◎▶☺☻►◄▧▨♨◐◑↔↕↘▀▄█▌◦☼♪の☆→♧ぃ￡❤▒▬♦◊◦♠♣▣۰•❤•۰►◄▧▨♨◐◑↔↕▪▫☼♦⊙●○①⊕◎Θ⊙¤㊣★☆♀◆◇✐✌✍✡✓✔✕✖♂♀♥♡☜☞☎☏⊙◎☺☻►◄▧▨♨◐◑↔↕♥♡▪▫☼♦▀▄█▌▐░▒▬♦◊◘◙◦☼♠♣▣▤▥▦▩◘◙◈♫♬♪♩♭♪✄☪☣☢☠♯♩♪♫♬♭♮☎☏☪♈ºº₪¤큐«»™♂✿♥　◕‿-｡　｡◕‿◕｡¿½☯✡㍿♂♀✚〓㎡♪♫♩♬㊚㊛囍㊒㊖Φ♀♂‖$@\u0026amp;#※卍卐Ψ♫♬♭♩♪♯♮⌒¶∮‖€￡¥$♥❣ღ♠♡♤❤❥\n数字\u0026amp;字母 Numerals and Alphabet ➀➁➂➃➄➅➆➇➈➉\n➊➋➌➍➎➏➐➑➒➓\n⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳\n❶❷❸❹❺❻❼❽❾❿⓫⓬⓭⓮⓯⓰⓱⓲⓳⓴\n㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉\n㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩\n⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇\n⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛\nⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻ\nⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ\nⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ\n⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵\nΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζνξοπρσηθικλμτυφχψω\nАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя\nāáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜüêɑńňɡ\n零壹贰叁肆伍陆柒捌玖拾佰仟万亿吉太拍艾分厘毫微\nㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ\n汉语字符 Chinese characters ㊎㊍㊌㊋㊏㊚㊛㊐㊊㊣㊤㊥㊦㊧㊨㊒㊫㊑㊓㊔㊕㊖㊗㊘㊜㊝㊞㊟㊠㊡㊢㊩㊪㊬㊭㊮㊯㊰\n卍卐卄巜弍弎弐朤氺曱甴囍兀々〆のぁ〡〢〣〤〥〦〧〨〩\n数学字符 Math characters ﹢﹣×÷±/=≌∽≦≧≒﹤﹥≈≡≠=≤≥\u0026lt;\u0026gt;≮≯∷∶∫∮∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙√∟⊿㏒㏑%‰\n⅟½⅓⅕⅙⅛⅔⅖⅚⅜¾⅗⅝⅞⅘\n≂≃≄≅≆≇≈≉≊≋≌≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠≡≢≣≤≥≦≧≨≩⊰⊱⋛⋚\n∫∬∭∮∯∰∱∲∳%℅‰‱øØπ\n单位字符 Unit °′″＄￥〒￠￡％＠℃℉﹩﹪‰﹫㎡㏕㎜㎝㎞㏎m³㎎㎏㏄º○¤%$º¹²³\n日期\u0026amp;时间 Date \u0026amp; Time ㋀㋁㋂㋃㋄㋅㋆㋇㋈㋉㋊㋋\n㏠㏡㏢㏣㏤㏥㏦㏧㏨㏩㏪㏫㏬㏭㏮㏯㏰㏱㏲㏳㏴㏵㏶㏷㏸㏹㏺㏻㏼㏽㏾\n㍙㍚㍛㍜㍝㍞㍟㍠㍡㍢㍣㍤㍥㍦㍧㍨㍩㍪㍫㍬㍭㍮㍯㍰㍘\n货币符号 Currency €£Ұ₴$₰¢₤¥₳₲₪₵元₣₱฿¤₡₮₭₩ރ円₢₥₫₦zł﷼₠₧₯₨Kčर₹ƒ₸￠\n箭头 Arrow ↑↓←→↖↗↘↙↔↕➻➼➽➸➳➺➻➴➵➶➷➹▶►▷◁◀◄\n«»➩➪➫➬➭➮➯➱⏎➲➾➔➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨↚↛↜↝↞↟↠↠↡↢↣↤↤↥↦↧↨⇄⇅⇆⇇⇈⇉⇊⇋⇌\n⇍⇎⇏⇐⇑⇒⇓⇔⇖⇗⇘⇙⇜↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹☇☈↼↽↾↿⇀⇁⇂⇃⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪↺↻⇚⇛♐\n制表符 Tabs ─ ━│┃╌╍╎╏┄ ┅┆┇┈ ┉┊┋┌┍┎┏┐┑┒┓└ ┕┖┗ ┘┙┚┛├┝┞┟┠┡┢┣ ┤┥┦┧┨┩┪┫┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╪ ╫ ╬═║╒╓╔ ╕╖╗╘╙╚ ╛╜╝╞╟╠ ╡╢╣╤ ╥ ╦ ╧ ╨ ╩ ╳╔ ╗╝╚ ╬ ═ ╓ ╩ ┠ ┨┯ ┷┏ ┓┗ ┛┳ ⊥ ﹃ ﹄┌ ╮ ╭ ╯╰\n","date":"2019-05-14T00:00:00Z","permalink":"https://visdot.com/warehouse/symbol/","section":"warehouse","tags":null,"title":"可直接引用特殊符号清单"},{"categories":null,"contents":" ▨ 联系我们  联系邮箱 leejiawang@live.com  ▨ 注意事项  转载本站内容请注明作者并附上相应的页面链接。 如本站不慎侵犯你的版权请联系我们，本站将及时处理，并撤下相关内容。 本站提供的下载链接，未做版权说明的仅供学习和研究使用，不得用于商业用途。 有好的建议和意见欢迎评论指正，加入群聊参与讨论。  ▨ 版权声明 本站点基于 Hugo 博客框架搭建，静态页面托管于 GitHub Pages。\nPrecautions  Please credit the author and include a link to the appropriate page for the content of this site. If this site inadvertently infringes your copyright, please contact us, we will promptly deal with, and withdraw the relevant content. The download link provided by this site, without copyright instructions for study and research purposes only, may not be used for commercial purposes. Have good suggestions and comments welcome to comment on the correction, join the group chat to participate in the discussion.  Copyright This site is built on the Hugo and static pages hosted on GitHub Pagess.\n    ","date":"0001-01-01T00:00:00Z","permalink":"https://visdot.com/about/","section":"","tags":null,"title":"About"}]